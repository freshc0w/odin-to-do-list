(()=>{"use strict";class t{constructor(t,e,s,i,n){this.name=t,this.description=e,this.dueDate=s,this.priority=i,this.id=n}set name(t){this._name=t}get name(){return this._name}get id(){return this._id}set id(t){this._id=t}get priority(){return this._priority}set priority(t){this._priority=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get dueDateFormatted(){return`${this.dueDate.split("/")[0]}/${this.dueDate.split("/")[1]}/${this.dueDate.split("/")[2]}`}}class e{constructor(t){this.name=t,this.tasks=[]}get name(){return this._name}set name(t){this._name=t}get tasks(){return this._tasks}set tasks(t){this._tasks=t}addTask(t){this._tasks.push(t)}deleteTask(t){this._tasks=this._tasks.filter((e=>e.getId()!==t))}}class s{constructor(){this.projects=[],this.projects.push(new e("Inbox")),this.projects.push(new e("Today")),this.projects.push(new e("This Week"))}get projects(){return this._projects}set projects(t){this._projects=t}contains(t){return this.projects.some((e=>e.name===t))}getProject(t){return this.projects.find((e=>e.name===t))}addProject(t){this.contains(t)||this.projects.push(new e(t))}deleteProject(t){const e=this.projects.find((e=>e.name===t));this.projects.splice(this.projects.indexOf(e),1)}}class i{constructor(t){this.task=t}renderInfo(t,e,s=""){const i=document.createElement(t);return i.classList.add(e),i.textContent=s,i}createElements(t){const e=this.renderInfo("input","statusCheck");e.setAttribute("type","checkbox"),e.setAttribute("id","statusCheck"),e.addEventListener("change",(e=>{e.target.checked?(t.style.opacity="40%",t.style.transform="translateY(1px)"):(t.style.opacity="100%",t.style.transform="translateY(-7px)")}));const s=this.renderInfo("div","taskName",this.task.name),i=this.renderInfo("button","taskDetailsBtn","Details"),n=this.renderInfo("div","statusPrio"),o=this.renderInfo("i","material-icons","warning");o.classList.add(this.task.priority),n.appendChild(o);const r=Date.now(),a=new Date(r),d=this.renderInfo("div","taskDate",`${a.toLocaleDateString()}`),c=this.renderInfo("div","taskEdit"),h=this.renderInfo("i","material-icons","edit");c.appendChild(h);const l=this.renderInfo("div","taskDel"),u=this.renderInfo("i","material-icons","delete");return l.appendChild(u),[e,s,i,n,d,c,l]}draw(){const t=this.renderInfo("div","task-container"),e=this.createElements(t);for(let s of e)t.appendChild(s);return t}}class n{constructor(t){this.project=t}draw(){const t=document.querySelector("#main-content");this.clear(t),this.drawTasks(t,this.project.tasks)}drawTasks(t,e){for(let s of e){const e=new i(s);t.appendChild(e.draw())}}clear(t){t.innerHTML=""}completeTask(){document.getElementById()}}class o{constructor(){this.toDoList=new s}loadHomePage(){o.addSideBarFunc(),console.log(this.toDoList.getProject("Inbox")),this.toDoList.getProject("Inbox").addTask(new t("Walking the dog","He is asking for it so this task is a must","today","medium",this.toDoList.getProject("Inbox").tasks.length));for(let t of this.toDoList.getProject("Inbox").tasks)new i(t).draw();new n(this.toDoList.getProject("Inbox")).draw(),console.log(this.toDoList.getProject("Inbox").tasks),console.log(this.toDoList.getProject("Today").name),this.addInboxTabs()}addInboxTabs(){const t=document.createElement("ul");this.addTab(t,"Today"),this.addTab(t,"This Week"),document.querySelector(".inbox-bar").appendChild(t)}addTab(t,e){const s=document.createElement("li");s.textContent=this.toDoList.getProject(e).name,t.appendChild(s)}static addSideBarFunc(){const t=document.getElementById("sideBar");document.querySelectorAll(".material-icons"),document.querySelectorAll(".icon-text"),t.addEventListener("mouseover",(()=>{t.style.width="200px"})),t.addEventListener("mouseout",(()=>{t.style.width="65px"}))}}(new o).loadHomePage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,