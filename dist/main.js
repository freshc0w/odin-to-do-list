(()=>{"use strict";function t(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(n){return t(1,arguments),n instanceof Date||"object"===e(n)&&"[object Date]"===Object.prototype.toString.call(n)}function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function r(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===a(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(e){if(t(1,arguments),!n(e)&&"number"!=typeof e)return!1;var a=r(e);return!isNaN(Number(a))}function o(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function s(e,n){t(2,arguments);var a=r(e).getTime(),i=o(n);return new Date(a+i)}function d(e,n){t(2,arguments);var a=o(n);return s(e,-a)}var u=864e5;function c(e){t(1,arguments);var n=1,a=r(e),i=a.getUTCDay(),o=(i<n?7:0)+i-n;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function l(e){t(1,arguments);var n=r(e),a=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=c(i),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var d=c(s);return n.getTime()>=o.getTime()?a+1:n.getTime()>=d.getTime()?a:a-1}function h(e){t(1,arguments);var n=l(e),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var r=c(a);return r}var m=6048e5,f={};function g(){return f}function y(e,n){var a,i,s,d,u,c,l,h;t(1,arguments);var m=g(),f=o(null!==(a=null!==(i=null!==(s=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==s?s:m.weekStartsOn)&&void 0!==i?i:null===(l=m.locale)||void 0===l||null===(h=l.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==a?a:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=r(e),p=y.getUTCDay(),v=(p<f?7:0)+p-f;return y.setUTCDate(y.getUTCDate()-v),y.setUTCHours(0,0,0,0),y}function p(e,n){var a,i,s,d,u,c,l,h;t(1,arguments);var m=r(e),f=m.getUTCFullYear(),p=g(),v=o(null!==(a=null!==(i=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==s?s:p.firstWeekContainsDate)&&void 0!==i?i:null===(l=p.locale)||void 0===l||null===(h=l.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==a?a:1);if(!(v>=1&&v<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var b=new Date(0);b.setUTCFullYear(f+1,0,v),b.setUTCHours(0,0,0,0);var w=y(b,n),k=new Date(0);k.setUTCFullYear(f,0,v),k.setUTCHours(0,0,0,0);var T=y(k,n);return m.getTime()>=w.getTime()?f+1:m.getTime()>=T.getTime()?f:f-1}function v(e,n){var a,r,i,s,d,u,c,l;t(1,arguments);var h=g(),m=o(null!==(a=null!==(r=null!==(i=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(d=n.locale)||void 0===d||null===(u=d.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==i?i:h.firstWeekContainsDate)&&void 0!==r?r:null===(c=h.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:1),f=p(e,n),v=new Date(0);v.setUTCFullYear(f,0,m),v.setUTCHours(0,0,0,0);var b=y(v,n);return b}var b=6048e5;function w(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const k=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return w("yy"===e?a%100:a,e.length)},T=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):w(n+1,2)},D=function(t,e){return w(t.getUTCDate(),e.length)},P=function(t,e){return w(t.getUTCHours()%12||12,e.length)},C=function(t,e){return w(t.getUTCHours(),e.length)},S=function(t,e){return w(t.getUTCMinutes(),e.length)},j=function(t,e){return w(t.getUTCSeconds(),e.length)},E=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return w(Math.floor(a*Math.pow(10,n-3)),e.length)};function M(t,e){var n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=e||"";return n+String(r)+o+w(i,2)}function x(t,e){return t%60==0?(t>0?"-":"+")+w(Math.abs(t)/60,2):L(t,e)}function L(t,e){var n=e||"",a=t>0?"-":"+",r=Math.abs(t);return a+w(Math.floor(r/60),2)+n+w(r%60,2)}const q={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return k(t,e)},Y:function(t,e,n,a){var r=p(t,a),i=r>0?r:1-r;return"YY"===e?w(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):w(i,e.length)},R:function(t,e){return w(l(t),e.length)},u:function(t,e){return w(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return w(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return w(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return T(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return w(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,n,a,i){var o=function(e,n){t(1,arguments);var a=r(e),i=y(a,n).getTime()-v(a,n).getTime();return Math.round(i/b)+1}(e,i);return"wo"===n?a.ordinalNumber(o,{unit:"week"}):w(o,n.length)},I:function(e,n,a){var i=function(e){t(1,arguments);var n=r(e),a=c(n).getTime()-h(n).getTime();return Math.round(a/m)+1}(e);return"Io"===n?a.ordinalNumber(i,{unit:"week"}):w(i,n.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):D(t,e)},D:function(e,n,a){var i=function(e){t(1,arguments);var n=r(e),a=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var i=n.getTime(),o=a-i;return Math.floor(o/u)+1}(e);return"Do"===n?a.ordinalNumber(i,{unit:"dayOfYear"}):w(i,n.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return w(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return w(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return w(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,r=t.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,r=t.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return P(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):C(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):w(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):w(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):S(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):j(t,e)},S:function(t,e){return E(t,e)},X:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return x(r);case"XXXX":case"XX":return L(r);default:return L(r,":")}},x:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return x(r);case"xxxx":case"xx":return L(r);default:return L(r,":")}},O:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+M(r,":");default:return"GMT"+L(r,":")}},z:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+M(r,":");default:return"GMT"+L(r,":")}},t:function(t,e,n,a){var r=a._originalDate||t;return w(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return w((a._originalDate||t).getTime(),e.length)}};var I=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},F=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},W={p:F,P:function(t,e){var n,a=t.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return I(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",I(r,e)).replace("{{time}}",F(i,e))}};const U=W;function A(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var B=["D","DD"],N=["YY","YYYY"];function O(t){return-1!==B.indexOf(t)}function Y(t){return-1!==N.indexOf(t)}function H(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var _={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function z(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,a=t.formats[n]||t.formats[t.defaultWidth];return a}}var G,R={date:z({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:z({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:z({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function X(t){return function(e,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=t.formattingValues[i]||t.formattingValues[r]}else{var o=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;a=t.values[s]||t.values[o]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function $(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;var o,s=i[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(d)?V(d,(function(t){return t.test(s)})):J(d,(function(t){return t.test(s)}));o=t.valueCallback?t.valueCallback(u):u,o=n.valueCallback?n.valueCallback(o):o;var c=e.slice(s.length);return{value:o,rest:c}}}function J(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function V(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const K={code:"en-US",formatDistance:function(t,e,n){var a,r=_[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:R,formatRelative:function(t,e,n,a){return Q[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:X({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:X({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:X({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:X({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:X({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(G={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(G.matchPattern);if(!n)return null;var a=n[0],r=t.match(G.parsePattern);if(!r)return null;var i=G.valueCallback?G.valueCallback(r[0]):r[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(a.length);return{value:i,rest:o}}),era:$({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:$({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:$({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:$({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:$({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var Z=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,tt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,et=/^'([^]*?)'?$/,nt=/''/g,at=/[a-zA-Z]/;function rt(e,n,a){var s,u,c,l,h,m,f,y,p,v,b,w,k,T,D,P,C,S;t(2,arguments);var j=String(n),E=g(),M=null!==(s=null!==(u=null==a?void 0:a.locale)&&void 0!==u?u:E.locale)&&void 0!==s?s:K,x=o(null!==(c=null!==(l=null!==(h=null!==(m=null==a?void 0:a.firstWeekContainsDate)&&void 0!==m?m:null==a||null===(f=a.locale)||void 0===f||null===(y=f.options)||void 0===y?void 0:y.firstWeekContainsDate)&&void 0!==h?h:E.firstWeekContainsDate)&&void 0!==l?l:null===(p=E.locale)||void 0===p||null===(v=p.options)||void 0===v?void 0:v.firstWeekContainsDate)&&void 0!==c?c:1);if(!(x>=1&&x<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var L=o(null!==(b=null!==(w=null!==(k=null!==(T=null==a?void 0:a.weekStartsOn)&&void 0!==T?T:null==a||null===(D=a.locale)||void 0===D||null===(P=D.options)||void 0===P?void 0:P.weekStartsOn)&&void 0!==k?k:E.weekStartsOn)&&void 0!==w?w:null===(C=E.locale)||void 0===C||null===(S=C.options)||void 0===S?void 0:S.weekStartsOn)&&void 0!==b?b:0);if(!(L>=0&&L<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var I=r(e);if(!i(I))throw new RangeError("Invalid time value");var F=A(I),W=d(I,F),B={firstWeekContainsDate:x,weekStartsOn:L,locale:M,_originalDate:I},N=j.match(tt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,U[e])(t,M.formatLong):t})).join("").match(Z).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return it(t);var i=q[r];if(i)return null!=a&&a.useAdditionalWeekYearTokens||!Y(t)||H(t,n,String(e)),null!=a&&a.useAdditionalDayOfYearTokens||!O(t)||H(t,n,String(e)),i(W,t,M.localize,B);if(r.match(at))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return N}function it(t){var e=t.match(et);return e?e[1].replace(nt,"'"):t}class ot{constructor(t,e,n,a,r){this.name=t,this.description=e,this.dueDate=n,this.priority=a,this.id=r,this.status=!1}set name(t){this._name=t}get name(){return this._name}get id(){return this._id}set id(t){this._id=t}get priority(){return this._priority}set priority(t){this._priority=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get dueDateFormatted(){const t=this.dueDate.split("/")[0];return`${this.dueDate.split("/")[1]}/${t}/${this.dueDate.split("/")[2]}`}get status(){return this._status}set status(t){this._status=t}}function st(e){t(1,arguments);var n=r(e);return n.setHours(0,0,0,0),n}function dt(e,n){t(2,arguments);var a=st(e),r=st(n);return a.getTime()===r.getTime()}function ut(e,n){var a,i,s,d,u,c,l,h;t(1,arguments);var m=g(),f=o(null!==(a=null!==(i=null!==(s=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==s?s:m.weekStartsOn)&&void 0!==i?i:null===(l=m.locale)||void 0===l||null===(h=l.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==a?a:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=r(e),p=y.getDay(),v=(p<f?7:0)+p-f;return y.setDate(y.getDate()-v),y.setHours(0,0,0,0),y}function ct(e,n,a){t(2,arguments);var r=ut(e,a),i=ut(n,a);return r.getTime()===i.getTime()}class lt{constructor(t){this.name=t,this.tasks=[]}get name(){return this._name}set name(t){this._name=t}get tasks(){return this._tasks}set tasks(t){this._tasks=t}addTask(t){this._tasks.push(t)}deleteTask(t){this._tasks=this._tasks.filter((e=>e.id!==t))}reInitialiseId(){for(let t=0;t<this.tasks.length;t++)this.tasks[t].id=t}getTasksToday(){return this.tasks.filter((e=>function(e){return t(1,arguments),dt(e,Date.now())}(r(new Date(e.dueDateFormatted)))))}getTasksThisWeek(){return this.tasks.filter((e=>function(e,n){return t(1,arguments),ct(e,Date.now(),n)}(r(new Date(e.dueDateFormatted)),1)))}getImportantTasks(){return this.tasks.filter((t=>"high"===t.priority))}getTaskNameById(t){for(let e of this.tasks)if(e.id===t)return e.name}}class ht{constructor(){this.projects=[];for(let t of["Inbox","Today","This Week","Important"])this.projects.push(new lt(t))}get projects(){return this._projects}set projects(t){this._projects=t}contains(t){return this.projects.some((e=>e.name===t))}getProject(t){return this.projects.find((e=>e.name===t))}addProject(t){this.contains(t)||this._projects.push(new lt(t))}deleteProject(t){const e=this.projects.find((e=>e.name===t));this.projects.splice(this.projects.indexOf(e),1)}getAllTasksToday(){const t=[];for(let e of this.getProject("Inbox").getTasksToday())t.push(e);return t}getAllTasksThisWeek(){const t=[];for(let e of this.getProject("Inbox").getTasksThisWeek())t.push(e);return t}getAllImportantTasks(){const t=[];for(let e of this.getProject("Inbox").getImportantTasks())t.push(e);return t}}const mt=()=>{const t=document.querySelector(".form-container"),e=()=>{const t=document.createElement("div"),e=document.createElement("label");e.classList.add("dateLabel"),e.setAttribute("for","inputDueDate"),e.textContent="Due Date:";const n=document.createElement("input");return n.setAttribute("type","date"),n.setAttribute("id","inputDueDate"),n.setAttribute("name","trip-start"),t.appendChild(e),t.appendChild(n),t},n=()=>{const t=document.createElement("div"),e=document.createElement("div"),n=document.createElement("div");t.classList.add("prioWrapper"),n.classList.add("prioOptions"),e.classList.add("prioLabel"),e.textContent="How important is this task?";const a=o("lowPrio","low"),r=o("medPrio","medium"),i=o("highPrio","high");for(let t of[a,r,i])n.appendChild(t);return t.appendChild(e),t.appendChild(n),t;function o(t,e){const n=document.createElement("div"),a=document.createElement("input"),r={type:"radio",id:t,name:"prio",value:e};for(let t in r)a.setAttribute(t,r[t]);const i=document.createElement("label");return i.setAttribute("for",t),i.classList.add(t),i.textContent=e,n.appendChild(a),n.appendChild(i),n}},a=()=>{const t=document.createElement("img");return t.classList.add("closeFormBtn"),t.src="../../../imgs/mac-close-btn.png",t.alt="A button that closes the form.",t.addEventListener("click",(()=>{const t=document.querySelector("form"),e=document.querySelector(".face-mask");t.style.visibility="hidden",e.style.visibility="hidden"})),t};return{addTask:()=>{const r=((t,e,n,a=!0)=>{const r=document.createElement("div"),i=document.createElement("label");i.setAttribute("for",n),i.textContent=t;const o=document.createElement("input"),s={type:"text",id:n,name:n,placeholder:e};for(let t in s)o.setAttribute(t,s[t]);return o.required=a,r.appendChild(i),r.appendChild(o),r})("Task Title: ","e.g. Learn React in 20 days..","inputTaskTitle");r.classList.add("inputTaskTitle");const i=((t,e,n,a=!0)=>{const r=document.createElement("div"),i=document.createElement("label");i.setAttribute("for",n),i.textContent=t;const o=document.createElement("textarea"),s={id:n,name:n,placeholder:e,rows:6,cols:50};for(let t in s)o.setAttribute(t,s[t]);return o.required=a,r.appendChild(i),r.appendChild(o),r})("Task Details: ","e.g. Not an task. Remember to take breaks and walk outside.","inputTaskDetails");i.classList.add("inputTaskDetails");const o=[r,i,n(),e(),a()];for(let e of o)t.appendChild(e);const s=(()=>{const t=document.createElement("button");return t.classList.add("uniqueBtn"),t.classList.add("appendTaskBtn"),t.textContent="Add Task",t.setAttribute("type","submit"),t})();t.appendChild(s),document.getElementById("medPrio").checked=!0},clear:()=>{for(;t.firstChild;)t.removeChild(t.lastChild)},collectTaskInfo:()=>{const t=document.getElementById("inputTaskTitle"),e=document.getElementById("inputTaskDetails"),n=document.querySelector('input[name="prio"]:checked'),a=document.querySelector("#inputDueDate"),r=rt(new Date(a.value),"dd/MM/yyyy");return{title:t.value,details:e.value,priority:n.value,date:r}},addProj:()=>{const e=document.createElement("label");e.setAttribute("for","inputProjTitle"),e.classList.add("promptProjTitle"),e.textContent="Project Title:";const n=document.createElement("input"),a={id:"inputProjTitle",type:"text",name:"inputProjTitle",placeholder:"The Odin Knowin' Codin' "};for(let t in a)n.setAttribute(t,a[t]);n.classList.add("inputProjTitle"),n.required=!0;const r=document.createElement("img");r.classList.add("closeFormBtn"),r.src="../../../imgs/mac-close-btn.png",r.alt="A button that closes the form.",r.addEventListener("click",(()=>{document.querySelector("form").style.visibility="hidden",document.querySelector(".face-mask").style.visibility="hidden"})),t.appendChild(e),t.appendChild(n),t.appendChild((()=>{const t=document.createElement("button");return t.classList.add("uniqueBtn"),t.classList.add("appendProjBtn"),t.textContent="Add Project",t.setAttribute("type","submit"),t})()),t.appendChild(r)}}};class ft{constructor(t){this.task=t}renderInfo(t,e,n=""){const a=document.createElement(t);return a.classList.add(e),a.textContent=n,a}createElements(t){const e=this.renderInfo("input","statusCheck");e.setAttribute("type","checkbox"),e.setAttribute("id","statusCheck"),this.task.status&&(e.checked=!0,t.style.opacity="35%"),e.addEventListener("change",(e=>{e.target.checked?(this.task.status=!0,t.style.opacity="35%"):(this.task.status=!1,t.style.opacity="100%")}));const n=this.renderInfo("div","taskName",this.task.name),a=this.renderInfo("button","uniqueBtn","Details");a.classList.add("details"),a.addEventListener("click",(()=>{this.drawDetailsPopUp(this.task)}));const r=this.renderInfo("div","statusPrio"),i=this.renderInfo("i","material-icons","warning");i.classList.add(this.task.priority),r.appendChild(i);const o=this.renderInfo("div","taskDate",this.task.dueDateFormatted);o.setAttribute("id","taskDate");const s=this.renderInfo("div","taskEdit"),d=this.renderInfo("i","material-icons","edit");s.setAttribute("id",`editTask-${this.task.id}`),s.appendChild(d);const u=this.renderInfo("div","taskDel"),c=this.renderInfo("i","material-icons","delete");return u.setAttribute("id",`delTask-${this.task.id}`),u.appendChild(c),[e,n,a,r,o,s,u]}draw(){const t=this.renderInfo("div","task-container"),e=this.createElements(t);for(let n of e)t.appendChild(n);return t}drawDetailsPopUp(t){this.addPopUp(),this.drawDetails(t),this.addCloseFormBtn()}drawDetails(t){const e=document.createElement("p"),n=document.createElement("p"),a=document.createElement("p"),r=document.createElement("p"),i=rt(new Date(t.dueDateFormatted),"dd/MM/yyyy");e.textContent=`Task Name: "${t.name}"`,n.textContent=`Task Details: "${t.description}"`,a.textContent=`Task Due Date: "${i}"`,r.textContent=`Task Priority: "${t.priority}"`,r.style.textTransform="capitalize",e.style.fontWeight="900";for(let t of[e,n,a,r])t.classList.add("taskDetails"),document.querySelector(".form-container").appendChild(t)}addPopUp(){mt().clear(),document.querySelector("form").style.visibility="visible",document.querySelector(".face-mask").style.visibility="visible"}addCloseFormBtn(){const t=document.createElement("img");t.classList.add("closeFormBtn"),t.src="../../../imgs/mac-close-btn.png",t.alt="A button that closes the form.",t.addEventListener("click",(()=>{document.querySelector("form").style.visibility="hidden",document.querySelector(".face-mask").style.visibility="hidden"})),document.querySelector(".form-container").appendChild(t)}}class gt{constructor(t){this.project=t}draw(){const t=document.querySelector("#main-content");this.clear(t),this.drawTasks(t,this.project.tasks);const e=this.addTaskOption();t.appendChild(e)}addTaskOption(){const t=document.createElement("div");t.classList.add("task-container"),t.classList.add("add");const e=document.createElement("button");return e.classList.add("uniqueBtn"),e.classList.add("alter"),e.classList.add("addTask"),e.innerHTML='<i class="material-icons">add_task</i>ADD TASK',t.appendChild(e),t}drawTasks(t,e){for(let n of e){const e=new ft(n);t.appendChild(e.draw())}}clear(t){t.innerHTML=""}completeTask(){document.getElementById()}}class yt{constructor(){this.toDoList=new ht,this.currentProjectPage="Inbox",this.currentForm=mt()}get currentProjectPage(){return this._currentProjectPage}set currentProjectPage(t){this._currentProjectPage=t}get toDoList(){return this._toDoList}set toDoList(t){this._toDoList=t}loadPage(t){this.toDoList.getProject(t).reInitialiseId(),this.updateAllTasks(),this.drawPage(t),this.addProjFunction(),this.addClearAllTasksFunction(),this.addTaskFunction(t),this.applyDelAndEditFunc(t)}drawPage(t){new gt(this.toDoList.getProject(t)).draw(),document.querySelector(".title-page-text").textContent=t,document.querySelectorAll(".taskDate").forEach((t=>t.style.fontSize="1.3rem"))}addTaskFunction(t){document.querySelector(".uniqueBtn.addTask").addEventListener("click",(()=>{this.currentForm.clear(),this.currentForm.addTask(),document.getElementById("medPrio").checked=!0,document.querySelector("form").style.visibility="visible",document.querySelector(".face-mask").style.visibility="visible",inputDueDate.valueAsDate=new Date;const e=document.querySelector(".uniqueBtn.appendTaskBtn");this.submitTaskFunction(e,t)}))}addNewTask(t,e){this.addTaskTo("Inbox",e),["Inbox","Today","This Week","Important"].includes(t)||this.addTaskTo(t,e)}addTaskTo(t,e){this.toDoList.getProject(t).addTask(new ot(e.title,e.details,e.date,e.priority,this.toDoList.getProject(t).tasks.length,e.status))}submitTaskFunction(t,e){t.addEventListener("click",(t=>{if(document.querySelector("form").checkValidity()){const n=this.currentForm.collectTaskInfo();for(let t of this.toDoList.projects)for(let e of t.tasks)if(e.name===n.title)return void document.getElementById("inputTaskTitle").setCustomValidity("Name has already been used!");this.addNewTask(e,n),document.querySelector("form").style.visibility="hidden",document.querySelector(".face-mask").style.visibility="hidden",this.loadPage(e),t.preventDefault()}}))}addProjFunction(){document.querySelector(".addProj").addEventListener("click",(()=>{this.currentForm.clear(),this.currentForm.addProj();const t=document.querySelector("form"),e=document.querySelector(".face-mask");t.style.visibility="visible",e.style.visibility="visible",this.addSubmitProjFunction()}))}addSubmitProjFunction(){const t=document.getElementById("inputProjTitle");document.querySelector(".appendProjBtn").addEventListener("click",(e=>{document.querySelector("form").checkValidity()&&(this.toDoList.addProject(t.value),document.querySelector("form").style.visibility="hidden",document.querySelector(".face-mask").style.visibility="hidden",this.clearProjectTabs(),this.drawProjectTabs(),this.loadSwitchPageEvents(),e.preventDefault(),this.currentProjectPage=t.value,this.loadPage(t.value))}))}deleteProjFunction(){const t=document.querySelector(".deleteProj"),e=["Inbox","Today","This Week","Important"];t.addEventListener("click",(()=>{this.toDoList.getProject(this.currentProjectPage).tasks.length>0&&e.includes(this.currentProjectPage)||(this.toDoList.deleteProject(this.currentProjectPage),this.clearProjectTabs(),this.drawProjectTabs(),this.loadSwitchPageEvents(),this.currentProjectPage="Inbox",this.loadPage("Inbox"))}))}removeTaskFunction(t,e){const n=document.getElementById(`delTask-${e}`);let a=this.toDoList.getProject(t).getTaskNameById(e);n.addEventListener("click",(()=>{for(let t of this.toDoList.projects)for(let e of t.tasks)e.name===a&&t.deleteTask(e.id);this.loadPage(t)}))}applyDelAndEditFunc(t){this.toDoList.getProject(t).tasks.map((e=>{this.removeTaskFunction(t,e.id),this.editTaskFunction(t,e.id)}))}editTaskFunction(t,e){const n=document.getElementById(`editTask-${e}`);let a=this.toDoList.getProject(t).getTaskNameById(e);const r=this.toDoList;n.addEventListener("click",(()=>{let t,n;this.currentForm.clear(),this.currentForm.addTask(),document.querySelector("form").style.visibility="visible",document.querySelector(".face-mask").style.visibility="hidden";for(let a of this.toDoList.getProject(this.currentProjectPage).tasks)a.id===e&&(t=a,n=a.name);i(t),o(t)}));const i=t=>{document.getElementById("inputTaskTitle").defaultValue=t.name,document.getElementById("inputTaskDetails").defaultValue=t.description;const e=t.priority.substr(0,3);"med"===e||"low"===e?document.getElementById(`${e}Prio`).checked=!0:document.getElementById("highPrio").checked=!0,document.getElementById("inputDueDate").value=t.dueDate.split("/").reverse().join("-")},o=t=>{const e=document.querySelector(".appendTaskBtn");e.textContent="Edit Task",e.addEventListener("click",(e=>{d(t),this.loadPage(this.currentProjectPage),document.querySelector("form").style.visibility="hidden",document.querySelector(".face-mask").style.visibility="hidden",this.loadPage(this.currentProjectPage),e.preventDefault()}))},s=t=>{t.name=document.getElementById("inputTaskTitle").value,t.description=document.getElementById("inputTaskDetails").value;const e=document.querySelector('input[name="prio"]:checked');t.priority=e.value;const n=document.querySelector("#inputDueDate"),a=rt(new Date(n.value),"dd/MM/yyyy");t.dueDate=a},d=t=>{for(let t of r.projects)for(let e of t.tasks)e.name===a&&(console.log(e.name),s(e))}}addClearAllTasksFunction(){document.querySelector(".uniqueBtn.clear").addEventListener("click",(()=>{const t=this.toDoList.getProject(this.currentProjectPage);let e=[];for(let n of t.tasks)t.deleteTask(n.id),e.push(n.name);for(let t of this.toDoList.projects)for(let n of t.tasks)e.includes(n.name)&&t.deleteTask(n.id);this.loadPage(this.currentProjectPage)}))}updateAllTasks(){const t={Today:this.toDoList.getAllTasksToday(),"This Week":this.toDoList.getAllTasksThisWeek(),Important:this.toDoList.getAllImportantTasks()};this.clearTaskForSetProj();for(let e in t)for(let n of t[e])this.toDoList.getProject(e).tasks.includes(n)||this.toDoList.getProject(e).addTask(n)}clearTaskForSetProj(){const t=["Today","This Week","Important"];this.toDoList.projects.filter((e=>t.includes(e.name))).map((t=>t.tasks=[]))}loadSideBar(){this.addSlideInOut(),this.drawInboxTabs(),this.drawProjectTabs(),this.loadSwitchPageEvents()}drawInboxTabs(){const t=document.createElement("ul");this.addTab(t,"Today"),this.addTab(t,"This Week");const e=document.querySelector(".inbox-bar");e.appendChild(t),this.addDropDownMenu(e,t)}drawProjectTabs(){const t=["Inbox","Today","This Week","Important"],e=this.toDoList.projects.filter((e=>!t.includes(e.name))),n=document.createElement("ul");n.classList.add("customProj");for(let t of e)this.addTab(n,t.name);const a=document.querySelector(".project-bar");a.appendChild(n),this.addDropDownMenu(a,n)}clearProjectTabs(){const t=document.querySelector(".customProj");t.parentNode.removeChild(t)}addDropDownMenu(t,e){t.addEventListener("mouseover",(()=>{e.style.display="block"})),t.addEventListener("mouseout",(()=>{e.style.display="none"}))}addTab(t,e){const n=document.createElement("li");n.textContent=this.toDoList.getProject(e).name,t.appendChild(n)}addSlideInOut(){const t=document.getElementById("sideBar");t.addEventListener("mouseover",(()=>{t.style.width="200px"})),t.addEventListener("mouseout",(()=>{t.style.width="65px"}))}loadSwitchPageEvents(){this.addSwitchPageFunc("span#inbox"),this.addSwitchPageFunc("span#important"),this.addSwitchPageFunc("li")}addSwitchPageFunc(t){document.querySelectorAll(t).forEach((t=>{t.addEventListener("click",(()=>{this.syncStatusCheck(this.currentProjectPage),this.currentProjectPage=t.innerText,this.loadPage(this.currentProjectPage)}))}))}syncStatusCheck(t){let e=[],n=[];for(let a of this.toDoList.getProject(t).tasks)a.status?e.push(a.name):n.push(a.name);for(let t of this.toDoList.projects)for(let a of t.tasks)e.includes(a.name)?a.status=!0:n.includes(a.name)&&(a.status=!1)}}!function(){const t=new yt;Date.prototype.addDays=function(t){let e=new Date(this.valueOf());return e.setDate(e.getDate()+t),e};const e=new Date,n=rt(e,"dd/MM/yyyy"),a=rt(e.addDays(2),"dd/MM/yyy"),r=rt(e.addDays(3),"dd/MM/yyy"),i=rt(e.addDays(4),"dd/MM/yyy"),o=rt(e.addDays(8),"dd/MM/yyy"),s=rt(e.addDays(10),"dd/MM/yyy");for(let e of["Odin Grind","Novels","Netflix"])t.toDoList.addProject(e);const d={title:"Learn React in 20 days",details:"He is asking for it so this task is a must",priority:"medium",date:n},u={title:"Revise Intermediate Git Control",details:"He is asking for it so this task is a must",priority:"high",date:a},c={title:"Finish off 'Ways of Kings' by Brandon Sanderson",details:"He is asking for it so this task is a must",priority:"low",date:r},l={title:"Get badminton racquets",details:"He is asking for it so this task is a must",priority:"high",date:i},h={title:"Watch Suits",details:"He is asking for it so this task is a must",priority:"low",date:o},m={title:"Start learning node.js",details:"He is asking for it so this task is a must",priority:"high",date:s},f={title:"Prepare dinner for family",details:"He is asking for it so this task is a must",priority:"medium",date:n};t.addNewTask("Odin Grind",d),t.addNewTask("Odin Grind",m),t.addNewTask("Odin Grind",u),t.addNewTask("Novels",c),t.addNewTask("Netflix",h);const g=[l,f];for(let e of g)t.addNewTask(t.currentProjectPage,e);t.loadPage(t.currentProjectPage),t.loadSideBar(),t.deleteProjFunction()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,