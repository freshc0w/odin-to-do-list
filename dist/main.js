(()=>{"use strict";class t{constructor(t,e,s,i,n){this.name=t,this.description=e,this.dueDate=s,this.priority=i,this.id=n}set name(t){this._name=t}get name(){return this._name}get id(){return this._id}set id(t){this._id=t}get priority(){return this._priority}set priority(t){this._priority=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get dueDateFormatted(){return`${this.dueDate.split("/")[0]}/${this.dueDate.split("/")[1]}/${this.dueDate.split("/")[2]}`}}class e{constructor(t){this.name=t,this.tasks=[]}get name(){return this._name}set name(t){this._name=t}get tasks(){return this._tasks}set tasks(t){this._tasks=t}addTask(t){this._tasks.push(t)}deleteTask(t){this._tasks=this._tasks.filter((e=>e.getId()!==t))}}class s{constructor(){this.projects=[],this.projects.push(new e("Inbox"))}get projects(){return this._projects}set projects(t){this._projects=t}contains(t){return this.projects.some((e=>e.name===t))}getProject(t){return this.projects.find((e=>e.name===t))}addProject(t){this.contains(t)||this.projects.push(new e(t))}deleteProject(t){const e=this.projects.find((e=>e.name===t));this.projects.splice(this.projects.indexOf(e),1)}}class i{constructor(t){this.task=t}renderInfo(t,e,s=""){const i=document.createElement(t);return i.classList.add(e),i.textContent=s,i}createElements(){const t=this.renderInfo("input","statusCheck");t.setAttribute("type","checkbox");const e=this.renderInfo("div","taskName",this.task.name),s=this.renderInfo("button","taskDetailsBtn","Details"),i=this.renderInfo("div","statusPrio"),n=this.renderInfo("i","material-icons","warning");n.classList.add(this.task.priority),i.appendChild(n);const r=Date.now(),o=new Date(r),a=this.renderInfo("div","taskDate",`${o.toLocaleDateString()}`),d=this.renderInfo("div","taskEdit"),c=this.renderInfo("i","material-icons","edit");d.appendChild(c);const h=this.renderInfo("div","taskDel"),l=this.renderInfo("i","material-icons","delete");return h.appendChild(l),[t,e,s,i,a,d,h]}draw(){const t=this.renderInfo("div","task-container"),e=this.createElements();for(let s of e)t.appendChild(s);return t}}class n{constructor(t){this.project=t}draw(){const t=document.querySelector("#main-content");this.clear(t),this.drawTasks(t,this.project.tasks)}drawTasks(t,e){for(let s of e){const e=new i(s);t.appendChild(e.draw())}}clear(t){t.innerHTML=""}}class r{constructor(){this.toDoList=new s}loadHomePage(){r.addSideBarFunc(),console.log(this.toDoList.getProject("Inbox")),this.toDoList.getProject("Inbox").addTask(new t("Walking the dog","He is asking for it so this task is a must","today","high",this.toDoList.getProject("Inbox").tasks.length));for(let t of this.toDoList.getProject("Inbox").tasks)new i(t).draw();new n(this.toDoList.getProject("Inbox")).draw(),console.log(this.toDoList.getProject("Inbox").tasks)}static addSideBarFunc(){const t=document.getElementById("sideBar");t.addEventListener("mouseover",(()=>{t.style.width="200px"})),t.addEventListener("mouseout",(()=>{t.style.width="65px"})),document.getElementsByClassName("inbox-bar")}}(new r).loadHomePage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNJTSxLQUFLMkUsU0FBVyxJQUFJeEQsQ0FDeEIsQ0FDQXlELGVBQ0lGLEVBQUdHLGlCQUNIQyxRQUFRQyxJQUFJL0UsS0FBSzJFLFNBQVNqRCxXQUFXLFVBR3JDMUIsS0FBSzJFLFNBQVNqRCxXQUFXLFNBQVNkLFFBQVEsSUFBSW5CLEVBQzFDLGtCQUFtQiw2Q0FBOEMsUUFDakUsT0FBUU8sS0FBSzJFLFNBQVNqRCxXQUFXLFNBQVNoQixNQUFNc0UsU0FJcEQsSUFBSSxJQUFJbkUsS0FBUWIsS0FBSzJFLFNBQVNqRCxXQUFXLFNBQVNoQixNQUM5QixJQUFJd0IsRUFBT3JCLEdBQ0lnRCxPQUdaLElBQUlHLEVBQVVoRSxLQUFLMkUsU0FBU2pELFdBQVcsVUFDL0NtQyxPQUNmaUIsUUFBUUMsSUFBSS9FLEtBQUsyRSxTQUFTakQsV0FBVyxTQUFTaEIsTUFFbEQsQ0FFQXVFLHdCQUNJLE1BQU1DLEVBQVUxQyxTQUFTMkMsZUFBZSxXQUN4Q0QsRUFBUUUsaUJBQWlCLGFBQWEsS0FDbENGLEVBQVFHLE1BQU1DLE1BQVEsT0FBTyxJQUVqQ0osRUFBUUUsaUJBQWlCLFlBQVksS0FDakNGLEVBQVFHLE1BQU1DLE1BQVEsTUFBTSxJQUdoQzlDLFNBQVMrQyx1QkFBdUIsWUFDcEMsR0N6Q2tCLElBQUliLEdBRVpFLGMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLXRvLWRvLWxpc3QvLi9zcmMvbW9kdWxlcy90YXNrLmpzIiwid2VicGFjazovL29kaW4tdG8tZG8tbGlzdC8uL3NyYy9tb2R1bGVzL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby1saXN0Ly4vc3JjL21vZHVsZXMvQWxsUHJvamVjdHMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby1saXN0Ly4vc3JjL21vZHVsZXMvVUkvUHJvamVjdFVJLmpzIiwid2VicGFjazovL29kaW4tdG8tZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1VJLmpzIiwid2VicGFjazovL29kaW4tdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBUYXNrIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIGlkKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgICB0aGlzLmlkID0gaWQ7IC8vIFRvIGFsbG93IGRlbGV0aW9uIG9mIHRhc2sgd2l0aCB0aGUgc2FtZSBuYW1lO1xuICAgICAgICBcbiAgICB9XG4gICAgc2V0IG5hbWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICAgIH07XG5cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfTtcbiAgICBcblxuICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH07XG4gICAgc2V0IGlkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2lkID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBwcmlvcml0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaW9yaXR5O1xuICAgIH1cbiAgICBzZXQgcHJpb3JpdHkodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcHJpb3JpdHkgPSB2YWx1ZTtcbiAgICB9XG4gICAgXG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gICAgfTtcbiAgICBzZXQgZGVzY3JpcHRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgZ2V0IGR1ZURhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kdWVEYXRlO1xuICAgIH07XG4gICAgc2V0IGR1ZURhdGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZHVlRGF0ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgZHVlRGF0ZUZvcm1hdHRlZCgpIHtcbiAgICAgICAgY29uc3QgZGF5ID0gdGhpcy5kdWVEYXRlLnNwbGl0KCcvJylbMF07XG4gICAgICAgIGNvbnN0IG1vbnRoID0gdGhpcy5kdWVEYXRlLnNwbGl0KCcvJylbMV07XG4gICAgICAgIGNvbnN0IHllYXIgPSB0aGlzLmR1ZURhdGUuc3BsaXQoJy8nKVsyXTtcblxuICAgICAgICByZXR1cm4gYCR7ZGF5fS8ke21vbnRofS8ke3llYXJ9YDtcbiAgICB9O1xufTsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9qZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudGFza3MgPSBbXTtcbiAgICB9O1xuICAgIFxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9O1xuICAgIHNldCBuYW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgICB9O1xuICAgIGdldCB0YXNrcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rhc2tzO1xuICAgIH07XG4gICAgc2V0IHRhc2tzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3Rhc2tzID0gdmFsdWU7XG4gICAgfVxuICAgIGFkZFRhc2sodGFzaykge1xuICAgICAgICB0aGlzLl90YXNrcy5wdXNoKHRhc2spOyAgICAgICAgXG4gICAgfTtcbiAgICBkZWxldGVUYXNrKHRhc2tJZCkge1xuICAgICAgICB0aGlzLl90YXNrcyA9IHRoaXMuX3Rhc2tzLmZpbHRlcih0YXNrID0+IHRhc2suZ2V0SWQoKSAhPT0gdGFza0lkKTtcbiAgICB9O1xuXG4gICAgLy8gVG8gYmUgYWRkZWQ6IEdldCB0b2RheSdzIGFuZCB0aGlzIHdlZWsncyB0YXNrcy4gXG59OyIsImltcG9ydCBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcbmltcG9ydCBQcm9qZWN0IGZyb20gXCIuL3Byb2plY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWxsUHJvamVjdHMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByb2plY3RzID0gW107XG4gICAgICAgIHRoaXMucHJvamVjdHMucHVzaChuZXcgUHJvamVjdCgnSW5ib3gnKSlcbiAgICB9O1xuXG4gICAgZ2V0IHByb2plY3RzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvamVjdHM7XG4gICAgfTtcbiAgICBzZXQgcHJvamVjdHModmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcHJvamVjdHMgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBwcm9qZWN0IG5hbWUgZXhpc3RzIGluIGxpc3Qgb2YgcHJvamVjdHMuXG4gICAgY29udGFpbnMocHJvamVjdE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdHMuc29tZShwcm9qZWN0ID0+IHByb2plY3QubmFtZSA9PT0gcHJvamVjdE5hbWUpO1xuICAgIH07XG5cbiAgICBnZXRQcm9qZWN0KHByb2plY3ROYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0Lm5hbWUgPT09IHByb2plY3ROYW1lKTtcbiAgICB9O1xuXG4gICAgYWRkUHJvamVjdChuZXdQcm9qZWN0TmFtZSkge1xuICAgICAgICAvLyBDYW5ub3QgaGF2ZSBzYW1lIHByb2plY3QgbmFtZXMuXG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5zKG5ld1Byb2plY3ROYW1lKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnByb2plY3RzLnB1c2gobmV3IFByb2plY3QobmV3UHJvamVjdE5hbWUpKTtcbiAgICB9O1xuXG4gICAgZGVsZXRlUHJvamVjdChwcm9qZWN0TmFtZSkge1xuICAgICAgICBjb25zdCBwcm9qZWN0VG9EZWxldGUgPSB0aGlzLnByb2plY3RzLmZpbmQocHJvamVjdCA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdC5uYW1lID09PSBwcm9qZWN0TmFtZSk7XG4gICAgICAgIHRoaXMucHJvamVjdHMuc3BsaWNlKHRoaXMucHJvamVjdHMuaW5kZXhPZihwcm9qZWN0VG9EZWxldGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxKVxuICAgIH07XG4gICAgXG5cbiAgICAvLyBDYW4gYWRkIHRvZGF5J3MgYW5kIHRoaXMgd2VlaydzIGZ1bmN0aW9uYWxpdHkuXG59OyIsImltcG9ydCBUYXNrIGZyb20gXCIuLi90YXNrXCI7XG5pbXBvcnQgUHJvamVjdCBmcm9tIFwiLi4vcHJvamVjdFwiO1xuXG5jbGFzcyBUYXNrVUkge1xuXG4gICAgLy8gUHVycG9zZSBvZiB0aGlzIGNsYXNzIGl0IHRvIHRha2UgaW4gYSB0YXNrIG9iaiwgYW5kIHR1cm4gaXQgaW50b1xuICAgIC8vIGEgZGl2IHdpdGggYWxsIHJlbGV2YW50IGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgdGFzay5cbiAgICAvLyBGcm9tIGxlZnQtdG8tcmlnaHQ6IFtjaGVja0JveCwgbmFtZSwgZGV0YWlscywgcHJpb3JpdHksIGRhdGUsIGVkaXRJY29uLCBiaW5JY29uXVxuICAgIGNvbnN0cnVjdG9yKHRhc2tPYmopIHtcbiAgICAgICAgdGhpcy50YXNrID0gdGFza09iajtcbiAgICB9O1xuICAgIHJlbmRlckluZm8oZWxlbSwgYWRkZWRDbGFzcywgdGV4dD0nJykge1xuICAgICAgICBjb25zdCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtKTtcbiAgICAgICAgbmFtZS5jbGFzc0xpc3QuYWRkKGFkZGVkQ2xhc3MpO1xuICAgICAgICBuYW1lLnRleHRDb250ZW50ID0gdGV4dDsgLy8gZGVmYXVsdCBlbXB0eSBzdHJcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuYW1lXG4gICAgfTtcbiAgICBjcmVhdGVFbGVtZW50cygpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzQ2hlY2sgPSB0aGlzLnJlbmRlckluZm8oJ2lucHV0JywgJ3N0YXR1c0NoZWNrJyk7XG4gICAgICAgIHN0YXR1c0NoZWNrLnNldEF0dHJpYnV0ZSgndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5yZW5kZXJJbmZvKCdkaXYnLCAndGFza05hbWUnLCB0aGlzLnRhc2submFtZSk7XG5cbiAgICAgICAgLy8gV2hlbiBjbGlja2VkLCBwb3AgdXAgYSBmb3JtIHdoZXJlIHRoZSBkZXRhaWxzIG9mIHRoZSB0YXNrIGlzIGRpc3BsYXllZC5cbiAgICAgICAgY29uc3QgZGV0YWlsc0J0biA9IHRoaXMucmVuZGVySW5mbygnYnV0dG9uJywgJ3Rhc2tEZXRhaWxzQnRuJywgJ0RldGFpbHMnKTtcblxuICAgICAgICAvLyBQcmlvcml0eSBpY29uXG4gICAgICAgIGNvbnN0IHByaW9yaXR5ID0gdGhpcy5yZW5kZXJJbmZvKCdkaXYnLCAnc3RhdHVzUHJpbycpO1xuICAgICAgICBjb25zdCBwcmlvcml0eUljb24gPSB0aGlzLnJlbmRlckluZm8oJ2knLCAnbWF0ZXJpYWwtaWNvbnMnLCAnd2FybmluZycpO1xuXG4gICAgICAgIC8vIENoYW5nZSBjb2xvciBiYXNlZCBvbiBwcmlvcml0eSBvZiB0YXNrIC0+IFsnaGlnaCcsICdtZWRpdW0nLCAnbG93J11cbiAgICAgICAgcHJpb3JpdHlJY29uLmNsYXNzTGlzdC5hZGQodGhpcy50YXNrLnByaW9yaXR5KVxuICAgICAgICBwcmlvcml0eS5hcHBlbmRDaGlsZChwcmlvcml0eUljb24pO1xuXG4gICAgICAgIC8vIEp1c3QgYSBtb2NrIGRhdGUgZm9yIG5vdy4gU3ViamVjdCB0byBjaGFuZ2UgYmFzZWQgb24gdXNlciBpbnB1dC5cbiAgICAgICAgY29uc3QgdGltZUVsYXBzZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKHRpbWVFbGFwc2VkKTtcbiAgICAgICAgY29uc3QgZGF0ZSA9IHRoaXMucmVuZGVySW5mbygnZGl2JywgJ3Rhc2tEYXRlJywgYCR7dG9kYXkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9YCk7XG5cbiAgICAgICAgLy8gaWNvbnNcbiAgICAgICAgY29uc3QgZWRpdCA9IHRoaXMucmVuZGVySW5mbygnZGl2JywgJ3Rhc2tFZGl0Jyk7XG4gICAgICAgIGNvbnN0IGVkaXRJY29uID0gdGhpcy5yZW5kZXJJbmZvKCdpJywgJ21hdGVyaWFsLWljb25zJywgJ2VkaXQnKTtcbiAgICAgICAgZWRpdC5hcHBlbmRDaGlsZChlZGl0SWNvbik7XG5cbiAgICAgICAgY29uc3QgdGFza0RlbCA9IHRoaXMucmVuZGVySW5mbygnZGl2JywgJ3Rhc2tEZWwnKTtcbiAgICAgICAgY29uc3QgZGVsSWNvbiA9IHRoaXMucmVuZGVySW5mbygnaScsICdtYXRlcmlhbC1pY29ucycsICdkZWxldGUnKTtcbiAgICAgICAgdGFza0RlbC5hcHBlbmRDaGlsZChkZWxJY29uKTtcblxuICAgICAgICByZXR1cm4gW3N0YXR1c0NoZWNrLCBuYW1lLCBkZXRhaWxzQnRuLCBwcmlvcml0eSwgZGF0ZSwgZWRpdCwgdGFza0RlbF07XG4gICAgfTtcbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gdGhpcy5yZW5kZXJJbmZvKCdkaXYnLCAndGFzay1jb250YWluZXInKTtcbiAgICAgICAgY29uc3QgZWxlbXMgPSB0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG4gICAgICAgIGZvciAobGV0IGVsZW0gb2YgZWxlbXMpIHtcbiAgICAgICAgICAgIHRhc2tDb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrQ29udGFpbmVyO1xuICAgIH07XG59O1xuXG5jbGFzcyBQcm9qZWN0VUkge1xuICAgIGNvbnN0cnVjdG9yKHByb2plY3RPYmopIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdE9iajtcbiAgICB9O1xuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG1haW5Db250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21haW4tY29udGVudCcpO1xuICAgICAgICB0aGlzLmNsZWFyKG1haW5Db250ZW50KTtcblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSB0YXNrcyBhbmQgZ2l2ZSBpdCBhIFRhc2tVSSBjbGFzcy5cbiAgICAgICAgLy8gVXNlIHRoZSBkcmF3IG1ldGhvZCB0byBnZXQgdGhlIGRpdiBjb250YWluZXIgYW5kIGFwcGVuZCBpdCB0byBtYWluQ29udGVudC5cblxuICAgICAgICB0aGlzLmRyYXdUYXNrcyhtYWluQ29udGVudCwgdGhpcy5wcm9qZWN0LnRhc2tzKTtcbiAgICB9XG4gICAgZHJhd1Rhc2tzKGNvbnRhaW5lciwgdGFza3MpIHtcbiAgICAgICAgZm9yKGxldCB0YXNrIG9mIHRhc2tzKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrRGlzcGxheSA9IG5ldyBUYXNrVUkodGFzayk7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGFza0Rpc3BsYXkuZHJhdygpKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgY2xlYXIoY29udGVudCkge1xuICAgICAgICBjb250ZW50LmlubmVySFRNTCA9ICcnO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7XG4gICAgVGFza1VJLFxuICAgIFByb2plY3RVSSxcbn0iLCJpbXBvcnQgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9wcm9qZWN0XCI7XG5pbXBvcnQgQWxsUHJvamVjdHMgZnJvbSBcIi4vQWxsUHJvamVjdHNcIjtcbmltcG9ydCB7IFRhc2tVSSwgUHJvamVjdFVJIH0gZnJvbSBcIi4vVUkvUHJvamVjdFVJXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRvRG9MaXN0ID0gbmV3IEFsbFByb2plY3RzKCk7XG4gICAgfTtcbiAgICBsb2FkSG9tZVBhZ2UoKSB7XG4gICAgICAgIFVJLmFkZFNpZGVCYXJGdW5jKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMudG9Eb0xpc3QuZ2V0UHJvamVjdCgnSW5ib3gnKSk7XG5cbiAgICAgICAgLy8gQWRkIGEgdGFzayB0byBpbmJveC5cbiAgICAgICAgdGhpcy50b0RvTGlzdC5nZXRQcm9qZWN0KCdJbmJveCcpLmFkZFRhc2sobmV3IFRhc2soXG4gICAgICAgICAgICAnV2Fsa2luZyB0aGUgZG9nJywgJ0hlIGlzIGFza2luZyBmb3IgaXQgc28gdGhpcyB0YXNrIGlzIGEgbXVzdCcsICd0b2RheScsXG4gICAgICAgICAgICAnaGlnaCcsIHRoaXMudG9Eb0xpc3QuZ2V0UHJvamVjdCgnSW5ib3gnKS50YXNrcy5sZW5ndGhcbiAgICAgICAgKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBnZXQgdGhlIHRhc2sgZnJvbSBpbmJveFxuICAgICAgICBmb3IobGV0IHRhc2sgb2YgdGhpcy50b0RvTGlzdC5nZXRQcm9qZWN0KCdJbmJveCcpLnRhc2tzKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdUYXNrID0gbmV3IFRhc2tVSSh0YXNrKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2tEaXNwbGF5ID0gbmV3VGFzay5kcmF3KClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0RGlzcGxheSA9IG5ldyBQcm9qZWN0VUkodGhpcy50b0RvTGlzdC5nZXRQcm9qZWN0KCdJbmJveCcpKTtcbiAgICAgICAgcHJvamVjdERpc3BsYXkuZHJhdygpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnRvRG9MaXN0LmdldFByb2plY3QoJ0luYm94JykudGFza3MpXG5cbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkU2lkZUJhckZ1bmMoKSB7XG4gICAgICAgIGNvbnN0IHNpZGVCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lkZUJhcicpO1xuICAgICAgICBzaWRlQmFyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcbiAgICAgICAgICAgIHNpZGVCYXIuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xuICAgICAgICB9KTtcbiAgICAgICAgc2lkZUJhci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgICAgIHNpZGVCYXIuc3R5bGUud2lkdGggPSAnNjVweCc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2luYm94LWJhcicpO1xuICAgIH07XG59O1xuIiwiaW1wb3J0IFVJIGZyb20gJy4vbW9kdWxlcy9VSSc7XG5jb25zdCBVc2VySW50ZXJmYWNlID0gbmV3IFVJKCk7XG5cblVzZXJJbnRlcmZhY2UubG9hZEhvbWVQYWdlKCk7Il0sIm5hbWVzIjpbIlRhc2siLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsImlkIiwidGhpcyIsInZhbHVlIiwiX25hbWUiLCJfaWQiLCJfcHJpb3JpdHkiLCJfZGVzY3JpcHRpb24iLCJfZHVlRGF0ZSIsImR1ZURhdGVGb3JtYXR0ZWQiLCJzcGxpdCIsIlByb2plY3QiLCJ0YXNrcyIsIl90YXNrcyIsImFkZFRhc2siLCJ0YXNrIiwicHVzaCIsImRlbGV0ZVRhc2siLCJ0YXNrSWQiLCJmaWx0ZXIiLCJnZXRJZCIsIkFsbFByb2plY3RzIiwicHJvamVjdHMiLCJfcHJvamVjdHMiLCJjb250YWlucyIsInByb2plY3ROYW1lIiwic29tZSIsInByb2plY3QiLCJnZXRQcm9qZWN0IiwiZmluZCIsImFkZFByb2plY3QiLCJuZXdQcm9qZWN0TmFtZSIsImRlbGV0ZVByb2plY3QiLCJwcm9qZWN0VG9EZWxldGUiLCJzcGxpY2UiLCJpbmRleE9mIiwiVGFza1VJIiwidGFza09iaiIsInJlbmRlckluZm8iLCJlbGVtIiwiYWRkZWRDbGFzcyIsInRleHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZUVsZW1lbnRzIiwic3RhdHVzQ2hlY2siLCJzZXRBdHRyaWJ1dGUiLCJkZXRhaWxzQnRuIiwicHJpb3JpdHlJY29uIiwiYXBwZW5kQ2hpbGQiLCJ0aW1lRWxhcHNlZCIsIkRhdGUiLCJub3ciLCJ0b2RheSIsImRhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJlZGl0IiwiZWRpdEljb24iLCJ0YXNrRGVsIiwiZGVsSWNvbiIsImRyYXciLCJ0YXNrQ29udGFpbmVyIiwiZWxlbXMiLCJQcm9qZWN0VUkiLCJwcm9qZWN0T2JqIiwibWFpbkNvbnRlbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xlYXIiLCJkcmF3VGFza3MiLCJjb250YWluZXIiLCJ0YXNrRGlzcGxheSIsImNvbnRlbnQiLCJpbm5lckhUTUwiLCJVSSIsInRvRG9MaXN0IiwibG9hZEhvbWVQYWdlIiwiYWRkU2lkZUJhckZ1bmMiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwic3RhdGljIiwic2lkZUJhciIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0eWxlIiwid2lkdGgiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==