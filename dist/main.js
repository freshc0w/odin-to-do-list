(()=>{"use strict";class t{constructor(t,e,s,i,n){this.name=t,this.description=e,this.dueDate=s,this.priority=i,this.id=n}set name(t){this._name=t}get name(){return this._name}get id(){return this._id}set id(t){this._id=t}get priority(){return this._priority}set priority(t){this._priority=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get dueDateFormatted(){return`${this.dueDate.split("-")[0]}/${this.dueDate.split("-")[1]}/${this.dueDate.split("-")[2]}`}}class e{constructor(t){this.name=t,this.tasks=[]}get name(){return this._name}set name(t){this._name=t}get tasks(){return this._tasks}set tasks(t){this._tasks=t}addTask(t){this._tasks.push(t)}deleteTask(t){this._tasks=this._tasks.filter((e=>e.id!==t))}}class s{constructor(){this.projects=[],this.projects.push(new e("Inbox")),this.projects.push(new e("Today")),this.projects.push(new e("This Week")),this.projects.push(new e("React"))}get projects(){return this._projects}set projects(t){this._projects=t}contains(t){return this.projects.some((e=>e.name===t))}getProject(t){return this.projects.find((e=>e.name===t))}addProject(t){this.contains(t)||this.projects.push(new e(t))}deleteProject(t){const e=this.projects.find((e=>e.name===t));this.projects.splice(this.projects.indexOf(e),1)}}class i{constructor(t){this.task=t}renderInfo(t,e,s=""){const i=document.createElement(t);return i.classList.add(e),i.textContent=s,i}createElements(t){const e=this.renderInfo("input","statusCheck");e.setAttribute("type","checkbox"),e.setAttribute("id","statusCheck"),e.addEventListener("change",(e=>{e.target.checked?t.style.opacity="40%":t.style.opacity="100%"}));const s=this.renderInfo("div","taskName",this.task.name),i=this.renderInfo("button","uniqueBtn","Details");i.classList.add("details");const n=this.renderInfo("div","statusPrio"),a=this.renderInfo("i","material-icons","warning");a.classList.add(this.task.priority),n.appendChild(a);const d=this.renderInfo("div","taskDate",this.task.dueDateFormatted),o=this.renderInfo("div","taskEdit"),r=this.renderInfo("i","material-icons","edit");o.appendChild(r);const c=this.renderInfo("div","taskDel"),l=this.renderInfo("i","material-icons","delete");return l.setAttribute("id",`delTask-${this.task.id}`),c.appendChild(l),[e,s,i,n,d,o,c]}draw(){const t=this.renderInfo("div","task-container"),e=this.createElements(t);for(let s of e)t.appendChild(s);return t}}class n{constructor(t){this.project=t}draw(){const t=document.querySelector("#main-content");this.clear(t),this.drawTasks(t,this.project.tasks);const e=this.addTaskOption();t.appendChild(e)}addTaskOption(){const t=document.createElement("div");t.classList.add("task-container"),t.classList.add("add");const e=document.createElement("button");return e.classList.add("uniqueBtn"),e.classList.add("add"),e.textContent="ADD",t.appendChild(e),t}drawTasks(t,e){for(let s of e){const e=new i(s);t.appendChild(e.draw())}}clear(t){t.innerHTML=""}completeTask(){document.getElementById()}}(new class{constructor(){this.toDoList=new s,this.currentProjectPage="Inbox",this.currentForm=(()=>{const t=document.querySelector(".form-container"),e=()=>{const t=document.createElement("img");return t.classList.add("closeFormBtn"),t.src="../../../imgs/mac-close-btn.png",t.alt="A button that closes the form.",t.addEventListener("click",(()=>{const t=document.querySelector("form"),e=document.querySelector(".face-mask");t.style.visibility="hidden",e.style.visibility="hidden"})),t},s=()=>{const t=document.createElement("div"),e=document.createElement("label");e.classList.add("dateLabel"),e.setAttribute("for","inputDueDate"),e.textContent="Due Date:";const s=document.createElement("input");return s.setAttribute("type","date"),s.setAttribute("id","inputDueDate"),s.setAttribute("name","trip-start"),t.appendChild(e),t.appendChild(s),t},i=()=>{const t=document.createElement("div"),e=document.createElement("div"),s=document.createElement("div");t.classList.add("prioWrapper"),s.classList.add("prioOptions"),e.classList.add("prioLabel"),e.textContent="How important is this task?";const i=d("lowPrio","low"),n=d("medPrio","medium"),a=d("highPrio","high");for(let t of[i,n,a])s.appendChild(t);return t.appendChild(e),t.appendChild(s),t;function d(t,e){const s=document.createElement("div"),i=document.createElement("input"),n={type:"radio",id:t,name:"prio",value:e};for(let t in n)i.setAttribute(t,n[t]);const a=document.createElement("label");return a.setAttribute("for",t),a.classList.add(t),a.textContent=e,s.appendChild(i),s.appendChild(a),s}};return{addTask:()=>{const n=((t,e,s,i=!0)=>{const n=document.createElement("div"),a=document.createElement("label");a.setAttribute("for",s),a.textContent=t;const d=document.createElement("input"),o={type:"text",id:s,name:s,placeholder:e};for(let t in o)d.setAttribute(t,o[t]);return d.required=i,n.appendChild(a),n.appendChild(d),n})("Task Title: ","e.g. Learn React in 20 days..","inputTaskTitle");n.classList.add("inputTaskTitle");const a=((t,e,s,i=!0)=>{const n=document.createElement("div"),a=document.createElement("label");a.setAttribute("for",s),a.textContent=t;const d=document.createElement("textarea"),o={id:s,name:s,placeholder:e,rows:6,cols:50};for(let t in o)d.setAttribute(t,o[t]);return d.required=i,n.appendChild(a),n.appendChild(d),n})("Task Details: ","e.g. Not an task. Remember to take breaks and walk outside.","inputTaskDetails");a.classList.add("inputTaskDetails");const d=[n,a,i(),s(),e()];for(let e of d)t.appendChild(e);const o=(()=>{const t=document.createElement("button");return t.classList.add("uniqueBtn"),t.classList.add("appendTaskBtn"),t.textContent="Add Task",t.setAttribute("type","submit"),t})();t.appendChild(o)},clear:()=>{for(;t.firstChild;)t.removeChild(t.lastChild)},collectTaskInfo:()=>{const t=document.getElementById("inputTaskTitle"),e=document.getElementById("inputTaskDetails"),s=document.querySelector('input[name="prio"]:checked'),i=document.querySelector("#inputDueDate");return{title:t.value,details:e.value,priority:s.value,date:i.value}}}})()}loadHomePage(){this.toDoList.getProject("Inbox").addTask(new t("Walking the dog","He is asking for it so this task is a must","25-02-2002","medium",this.toDoList.getProject("Inbox").tasks.length)),this.addNewTask(this.currentProjectPage,{title:"Walking the dog",details:"He is asking for it so this task is a must",priority:"medium",date:"25-02-2002"}),this.loadSideBar()}drawPage(t){new n(this.toDoList.getProject(t)).draw(),this.addTaskFunction(t)}addTaskFunction(t){document.querySelector(".uniqueBtn.add").addEventListener("click",(()=>{this.currentForm.clear(),this.currentForm.addTask(),document.querySelector("form").style.visibility="visible",document.querySelector(".face-mask").style.visibility="visible",inputDueDate.valueAsDate=new Date;const e=document.querySelector(".uniqueBtn.appendTaskBtn");this.submitTaskFunction(e,t)}))}addNewTask(e,s){this.toDoList.getProject(e).addTask(new t(s.title,s.details,s.date,s.priority,this.toDoList.getProject(e).tasks.length));const i=this.toDoList.getProject(e).tasks.length-1;this.drawPage(e),this.addDeleteTaskFunction(e,i)}submitTaskFunction(t,e){t.addEventListener("click",(t=>{const s=this.currentForm.collectTaskInfo();this.addNewTask(e,s),document.querySelector("form").style.visibility="hidden",document.querySelector(".face-mask").style.visibility="hidden",t.preventDefault()}))}addDeleteTaskFunction(t,e){document.getElementById(`delTask-${e}`).addEventListener("click",(()=>{this.toDoList.getProject(t).deleteTask(e),this.drawPage(t)}))}loadSideBar(){this.addSlideInOut(),this.drawInboxTabs(),this.drawProjectTabs()}drawInboxTabs(){const t=document.createElement("ul");this.addTab(t,"Today"),this.addTab(t,"This Week");const e=document.querySelector(".inbox-bar");e.appendChild(t),this.addDropDownMenu(e,t)}drawProjectTabs(){const t=["Inbox","Today","This Week"],e=this.toDoList.projects.filter((e=>!t.includes(e.name))),s=document.createElement("ul");for(let t of e)this.addTab(s,t.name);const i=document.querySelector(".project-bar");i.appendChild(s),this.addDropDownMenu(i,s)}addDropDownMenu(t,e){t.addEventListener("mouseover",(()=>{e.style.display="block"})),t.addEventListener("mouseout",(()=>{e.style.display="none"}))}addTab(t,e){const s=document.createElement("li");s.textContent=this.toDoList.getProject(e).name,t.appendChild(s)}addSlideInOut(){const t=document.getElementById("sideBar");document.querySelectorAll(".material-icons"),document.querySelectorAll(".icon-text"),t.addEventListener("mouseover",(()=>{t.style.width="200px"})),t.addEventListener("mouseout",(()=>{t.style.width="65px"}))}}).loadHomePage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,