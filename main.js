(()=>{"use strict";class t{constructor(t,e,s,i,r){this.name=t,this.description=e,this.dueDate=s,this.priority=i,this.id=r}set name(t){this._name=t}get name(){return this._name}get id(){return this._id}set id(t){this._id=t}get priority(){return this._priority}set priority(t){this._priority=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get dueDateFormatted(){return`${this.dueDate.split("/")[0]}/${this.dueDate.split("/")[1]}/${this.dueDate.split("/")[2]}`}}class e{constructor(t){this.name=t,this.tasks=[]}get name(){return this._name}set name(t){this._name=t}get tasks(){return this._tasks}set tasks(t){this._tasks=t}addTask(t){this._tasks.push(t)}deleteTask(t){this._tasks=this._tasks.filter((e=>e.getId()!==t))}}class s{constructor(){this.projects=[],this.projects.push(new e("Inbox"))}get projects(){return this._projects}set projects(t){this._projects=t}contains(t){return this.projects.some((e=>e.name===t))}getProject(t){return this.projects.find((e=>e.name===t))}addProject(t){this.contains(t)||this.projects.push(new e(t))}deleteProject(t){const e=this.projects.find((e=>e.name===t));this.projects.splice(this.projects.indexOf(e),1)}}class i{constructor(){this.toDoList=new s}loadHomePage(){i.addSideBarFunc(),console.log(this.toDoList.getProject("Inbox")),this.toDoList.getProject("Inbox").addTask(new t("Walking the dog","He is asking for it so this task is a must","today","high",this.toDoList.getProject("Inbox").tasks.length));for(let t of this.toDoList.getProject("Inbox").tasks)new r(t).draw();new o(this.toDoList.getProject("Inbox")).draw(),console.log(this.toDoList.getProject("Inbox").tasks)}static addSideBarFunc(){const t=document.getElementById("sideBar");t.addEventListener("mouseover",(()=>{t.style.width="200px"})),t.addEventListener("mouseout",(()=>{t.style.width="65px"})),document.getElementsByClassName("inbox-bar")}}class r{constructor(t){this.task=t}renderInfo(t,e,s=""){const i=document.createElement(t);return i.classList.add(e),i.textContent=s,i}createElements(){const t=this.renderInfo("input","statusCheck");return t.setAttribute("type","checkbox"),[t,this.renderInfo("div","taskName",this.task.name),this.renderInfo("div","taskDetails",this.task.description),this.renderInfo("div","statusPrio","!"),this.renderInfo("div","taskDate","This is the  dueDate."),this.renderInfo("div","taskEdit","This is a editIcon."),this.renderInfo("div","taskDel","This is a binIcon.")]}draw(){const t=this.renderInfo("div","taskContainer"),e=this.createElements();for(let s of e)t.appendChild(s);return t}}class o{constructor(t){this.project=t}draw(){const t=document.querySelector("#main-content");this.clear(t),this.drawTasks(t,this.project.tasks)}drawTasks(t,e){for(let s of e){const e=new r(s);t.appendChild(e.draw())}}clear(t){t.innerHTML=""}}(new i).loadHomePage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,