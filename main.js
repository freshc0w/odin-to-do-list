(()=>{"use strict";class t{constructor(t,e,s,i,n){this.name=t,this.description=e,this.dueDate=s,this.priority=i,this.id=n}set name(t){this._name=t}get name(){return this._name}get id(){return this._id}set id(t){this._id=t}get priority(){return this._priority}set priority(t){this._priority=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get dueDateFormatted(){return`${this.dueDate.split("-")[0]}/${this.dueDate.split("-")[1]}/${this.dueDate.split("-")[2]}`}}class e{constructor(t){this.name=t,this.tasks=[]}get name(){return this._name}set name(t){this._name=t}get tasks(){return this._tasks}set tasks(t){this._tasks=t}addTask(t){this._tasks.push(t)}deleteTask(t){this._tasks=this._tasks.filter((e=>e.id!==t))}reInitialiseId(){for(let t=0;t<this.tasks.length;t++)this.tasks[t].id=t}}class s{constructor(){this.projects=[],this.projects.push(new e("Inbox")),this.projects.push(new e("Today")),this.projects.push(new e("This Week")),this.projects.push(new e("React"))}get projects(){return this._projects}set projects(t){this._projects=t}contains(t){return this.projects.some((e=>e.name===t))}getProject(t){return this.projects.find((e=>e.name===t))}addProject(t){this.contains(t)||this.projects.push(new e(t))}deleteProject(t){const e=this.projects.find((e=>e.name===t));this.projects.splice(this.projects.indexOf(e),1)}}class i{constructor(t){this.task=t}renderInfo(t,e,s=""){const i=document.createElement(t);return i.classList.add(e),i.textContent=s,i}createElements(t){const e=this.renderInfo("input","statusCheck");e.setAttribute("type","checkbox"),e.setAttribute("id","statusCheck"),e.addEventListener("change",(e=>{e.target.checked?t.style.opacity="40%":t.style.opacity="100%"}));const s=this.renderInfo("div","taskName",this.task.name),i=this.renderInfo("button","uniqueBtn","Details");i.classList.add("details");const n=this.renderInfo("div","statusPrio"),a=this.renderInfo("i","material-icons","warning");a.classList.add(this.task.priority),n.appendChild(a);const d=this.renderInfo("div","taskDate",this.task.dueDateFormatted),r=this.renderInfo("div","taskEdit"),o=this.renderInfo("i","material-icons","edit");r.appendChild(o);const c=this.renderInfo("div","taskDel"),l=this.renderInfo("i","material-icons","delete");return c.setAttribute("id",`delTask-${this.task.id}`),c.appendChild(l),[e,s,i,n,d,r,c]}draw(){const t=this.renderInfo("div","task-container"),e=this.createElements(t);for(let s of e)t.appendChild(s);return t}}class n{constructor(t){this.project=t}draw(){const t=document.querySelector("#main-content");this.clear(t),this.drawTasks(t,this.project.tasks);const e=this.addTaskOption();t.appendChild(e)}addTaskOption(){const t=document.createElement("div");t.classList.add("task-container"),t.classList.add("add");const e=document.createElement("button");return e.classList.add("uniqueBtn"),e.classList.add("add"),e.textContent="ADD",t.appendChild(e),t}drawTasks(t,e){for(let s of e){const e=new i(s);t.appendChild(e.draw())}}clear(t){t.innerHTML=""}completeTask(){document.getElementById()}}(new class{constructor(){this.toDoList=new s,this.currentProjectPage="Inbox",this.currentForm=(()=>{const t=document.querySelector(".form-container"),e=()=>{const t=document.createElement("img");return t.classList.add("closeFormBtn"),t.src="../../../imgs/mac-close-btn.png",t.alt="A button that closes the form.",t.addEventListener("click",(()=>{const t=document.querySelector("form"),e=document.querySelector(".face-mask");t.style.visibility="hidden",e.style.visibility="hidden"})),t},s=()=>{const t=document.createElement("div"),e=document.createElement("label");e.classList.add("dateLabel"),e.setAttribute("for","inputDueDate"),e.textContent="Due Date:";const s=document.createElement("input");return s.setAttribute("type","date"),s.setAttribute("id","inputDueDate"),s.setAttribute("name","trip-start"),t.appendChild(e),t.appendChild(s),t},i=()=>{const t=document.createElement("div"),e=document.createElement("div"),s=document.createElement("div");t.classList.add("prioWrapper"),s.classList.add("prioOptions"),e.classList.add("prioLabel"),e.textContent="How important is this task?";const i=d("lowPrio","low"),n=d("medPrio","medium"),a=d("highPrio","high");for(let t of[i,n,a])s.appendChild(t);return t.appendChild(e),t.appendChild(s),t;function d(t,e){const s=document.createElement("div"),i=document.createElement("input"),n={type:"radio",id:t,name:"prio",value:e};for(let t in n)i.setAttribute(t,n[t]);const a=document.createElement("label");return a.setAttribute("for",t),a.classList.add(t),a.textContent=e,s.appendChild(i),s.appendChild(a),s}};return{addTask:()=>{const n=((t,e,s,i=!0)=>{const n=document.createElement("div"),a=document.createElement("label");a.setAttribute("for",s),a.textContent=t;const d=document.createElement("input"),r={type:"text",id:s,name:s,placeholder:e};for(let t in r)d.setAttribute(t,r[t]);return d.required=i,n.appendChild(a),n.appendChild(d),n})("Task Title: ","e.g. Learn React in 20 days..","inputTaskTitle");n.classList.add("inputTaskTitle");const a=((t,e,s,i=!0)=>{const n=document.createElement("div"),a=document.createElement("label");a.setAttribute("for",s),a.textContent=t;const d=document.createElement("textarea"),r={id:s,name:s,placeholder:e,rows:6,cols:50};for(let t in r)d.setAttribute(t,r[t]);return d.required=i,n.appendChild(a),n.appendChild(d),n})("Task Details: ","e.g. Not an task. Remember to take breaks and walk outside.","inputTaskDetails");a.classList.add("inputTaskDetails");const d=[n,a,i(),s(),e()];for(let e of d)t.appendChild(e);const r=(()=>{const t=document.createElement("button");return t.classList.add("uniqueBtn"),t.classList.add("appendTaskBtn"),t.textContent="Add Task",t.setAttribute("type","submit"),t})();t.appendChild(r)},clear:()=>{for(;t.firstChild;)t.removeChild(t.lastChild)},collectTaskInfo:()=>{const t=document.getElementById("inputTaskTitle"),e=document.getElementById("inputTaskDetails"),s=document.querySelector('input[name="prio"]:checked'),i=document.querySelector("#inputDueDate");return{title:t.value,details:e.value,priority:s.value,date:i.value}}}})()}loadHomePage(){this.addNewTask(this.currentProjectPage,{title:"Walking the dog",details:"He is asking for it so this task is a must",priority:"medium",date:"25-02-2002"}),this.loadSideBar()}loadPage(t){this.toDoList.getProject(t).reInitialiseId(),this.drawPage(t),this.addTaskFunction(t),this.applyDelTaskFunction(t)}drawPage(t){new n(this.toDoList.getProject(t)).draw()}addTaskFunction(t){document.querySelector(".uniqueBtn.add").addEventListener("click",(()=>{this.currentForm.clear(),this.currentForm.addTask(),document.querySelector("form").style.visibility="visible",document.querySelector(".face-mask").style.visibility="visible",inputDueDate.valueAsDate=new Date;const e=document.querySelector(".uniqueBtn.appendTaskBtn");this.submitTaskFunction(e,t)}))}addNewTask(e,s){this.toDoList.getProject(e).addTask(new t(s.title,s.details,s.date,s.priority,this.toDoList.getProject(e).tasks.length)),this.loadPage(e)}submitTaskFunction(t,e){t.addEventListener("click",(t=>{const s=this.currentForm.collectTaskInfo();this.addNewTask(e,s),document.querySelector("form").style.visibility="hidden",document.querySelector(".face-mask").style.visibility="hidden",t.preventDefault()}))}removeTaskFunction(t,e){document.getElementById(`delTask-${e}`).addEventListener("click",(()=>{this.toDoList.getProject(t).deleteTask(e),this.loadPage(t)}))}applyDelTaskFunction(t){this.toDoList.getProject(t).tasks.map((e=>{this.removeTaskFunction(t,e.id)}))}loadSideBar(){this.addSlideInOut(),this.drawInboxTabs(),this.drawProjectTabs()}drawInboxTabs(){const t=document.createElement("ul");this.addTab(t,"Today"),this.addTab(t,"This Week");const e=document.querySelector(".inbox-bar");e.appendChild(t),this.addDropDownMenu(e,t)}drawProjectTabs(){const t=["Inbox","Today","This Week"],e=this.toDoList.projects.filter((e=>!t.includes(e.name))),s=document.createElement("ul");for(let t of e)this.addTab(s,t.name);const i=document.querySelector(".project-bar");i.appendChild(s),this.addDropDownMenu(i,s)}addDropDownMenu(t,e){t.addEventListener("mouseover",(()=>{e.style.display="block"})),t.addEventListener("mouseout",(()=>{e.style.display="none"}))}addTab(t,e){const s=document.createElement("li");s.textContent=this.toDoList.getProject(e).name,t.appendChild(s)}addSlideInOut(){const t=document.getElementById("sideBar");t.addEventListener("mouseover",(()=>{t.style.width="200px"})),t.addEventListener("mouseout",(()=>{t.style.width="65px"}))}}).loadHomePage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEtBQ3JDNkcsRUFBS3pHLE1BQU0wRyxRQUFVLE9BQU8sSUFFN0JGLEVBQVE1RyxpQkFBaUIsWUFBWSxLQUNwQzZHLEVBQUt6RyxNQUFNMEcsUUFBVSxNQUFNLEdBRTdCLENBQ0FWLE9BQU9XLEVBQVN6SSxHQUVmLE1BQU0wSSxFQUFNekgsU0FBU0MsY0FBYyxNQUVuQ3dILEVBQUlySCxZQUFjOUMsS0FBS2tGLFNBQVN0RCxXQUFXSCxHQUFhOUIsS0FDeER1SyxFQUFRdkcsWUFBWXdHLEVBQ3JCLENBRUFoQixnQkFDQyxNQUFNaUIsRUFBVTFILFNBQVN1QyxlQUFlLFdBQ3hDbUYsRUFBUWpILGlCQUFpQixhQUFhLEtBQ3JDaUgsRUFBUTdHLE1BQU04RyxNQUFRLE9BQU8sSUFFOUJELEVBQVFqSCxpQkFBaUIsWUFBWSxLQUNwQ2lILEVBQVE3RyxNQUFNOEcsTUFBUSxNQUFNLEdBRTlCLElEckthbkMsYyIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tdG8tZG8tbGlzdC8uL3NyYy9tb2R1bGVzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby1saXN0Ly4vc3JjL21vZHVsZXMvcHJvamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvLWRvLWxpc3QvLi9zcmMvbW9kdWxlcy9BbGxQcm9qZWN0cy5qcyIsIndlYnBhY2s6Ly9vZGluLXRvLWRvLWxpc3QvLi9zcmMvbW9kdWxlcy9VSS9Qcm9qZWN0VUkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby1saXN0Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG8tZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1VJLmpzIiwid2VicGFjazovL29kaW4tdG8tZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1VJL2Zvcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFzayB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBpZCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgdGhpcy5pZCA9IGlkOyAvLyBUbyBhbGxvdyBkZWxldGlvbiBvZiB0YXNrIHdpdGggdGhlIHNhbWUgbmFtZTtcbiAgICAgICAgXG4gICAgfVxuICAgIHNldCBuYW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH07XG4gICAgXG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfTtcbiAgICBzZXQgaWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHByaW9yaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpb3JpdHk7XG4gICAgfVxuICAgIHNldCBwcmlvcml0eSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wcmlvcml0eSA9IHZhbHVlO1xuICAgIH1cbiAgICBcbiAgICBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHNldCBkZXNjcmlwdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IHZhbHVlO1xuICAgIH07XG5cbiAgICBnZXQgZHVlRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2R1ZURhdGU7XG4gICAgfTtcbiAgICBzZXQgZHVlRGF0ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kdWVEYXRlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBkdWVEYXRlRm9ybWF0dGVkKCkge1xuICAgICAgICBjb25zdCBkYXkgPSB0aGlzLmR1ZURhdGUuc3BsaXQoJy0nKVswXTtcbiAgICAgICAgY29uc3QgbW9udGggPSB0aGlzLmR1ZURhdGUuc3BsaXQoJy0nKVsxXTtcbiAgICAgICAgY29uc3QgeWVhciA9IHRoaXMuZHVlRGF0ZS5zcGxpdCgnLScpWzJdO1xuXG4gICAgICAgIHJldHVybiBgJHtkYXl9LyR7bW9udGh9LyR7eWVhcn1gO1xuICAgIH07XG59OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3Qge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy50YXNrcyA9IFtdO1xuICAgIH07XG4gICAgXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH07XG4gICAgc2V0IG5hbWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICAgIH07XG4gICAgZ2V0IHRhc2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFza3M7XG4gICAgfTtcbiAgICBzZXQgdGFza3ModmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdGFza3MgPSB2YWx1ZTtcbiAgICB9XG4gICAgYWRkVGFzayh0YXNrKSB7XG4gICAgICAgIHRoaXMuX3Rhc2tzLnB1c2godGFzayk7ICAgICAgICBcbiAgICB9O1xuICAgIGRlbGV0ZVRhc2sodGFza0lkKSB7XG4gICAgICAgIHRoaXMuX3Rhc2tzID0gdGhpcy5fdGFza3MuZmlsdGVyKHRhc2sgPT4gdGFzay5pZCAhPT0gdGFza0lkKTtcbiAgICB9O1xuICAgIHJlSW5pdGlhbGlzZUlkKCkge1xuICAgICAgICBmb3IobGV0IG5ld0lkID0gMDsgbmV3SWQgPCB0aGlzLnRhc2tzLmxlbmd0aDsgbmV3SWQrKykge1xuICAgICAgICAgICAgdGhpcy50YXNrc1tuZXdJZF0uaWQgPSBuZXdJZDsgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUbyBiZSBhZGRlZDogR2V0IHRvZGF5J3MgYW5kIHRoaXMgd2VlaydzIHRhc2tzLiBcbn07IiwiaW1wb3J0IFRhc2sgZnJvbSBcIi4vdGFza1wiO1xuaW1wb3J0IFByb2plY3QgZnJvbSBcIi4vcHJvamVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbGxQcm9qZWN0cyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJvamVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5wcm9qZWN0cy5wdXNoKG5ldyBQcm9qZWN0KCdJbmJveCcpKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0cy5wdXNoKG5ldyBQcm9qZWN0KCdUb2RheScpKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0cy5wdXNoKG5ldyBQcm9qZWN0KCdUaGlzIFdlZWsnKSk7XG4gICAgICAgIHRoaXMucHJvamVjdHMucHVzaChuZXcgUHJvamVjdCgnUmVhY3QnKSk7XG4gICAgfTtcblxuICAgIGdldCBwcm9qZWN0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2plY3RzO1xuICAgIH07XG4gICAgc2V0IHByb2plY3RzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3Byb2plY3RzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgcHJvamVjdCBuYW1lIGV4aXN0cyBpbiBsaXN0IG9mIHByb2plY3RzLlxuICAgIGNvbnRhaW5zKHByb2plY3ROYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3RzLnNvbWUocHJvamVjdCA9PiBwcm9qZWN0Lm5hbWUgPT09IHByb2plY3ROYW1lKTtcbiAgICB9O1xuXG4gICAgZ2V0UHJvamVjdChwcm9qZWN0TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0cy5maW5kKHByb2plY3QgPT4gcHJvamVjdC5uYW1lID09PSBwcm9qZWN0TmFtZSk7XG4gICAgfTtcblxuICAgIGFkZFByb2plY3QobmV3UHJvamVjdE5hbWUpIHtcbiAgICAgICAgLy8gQ2Fubm90IGhhdmUgc2FtZSBwcm9qZWN0IG5hbWVzLlxuICAgICAgICBpZiAodGhpcy5jb250YWlucyhuZXdQcm9qZWN0TmFtZSkpIHJldHVybjtcbiAgICAgICAgdGhpcy5wcm9qZWN0cy5wdXNoKG5ldyBQcm9qZWN0KG5ld1Byb2plY3ROYW1lKSk7XG4gICAgfTtcblxuICAgIGRlbGV0ZVByb2plY3QocHJvamVjdE5hbWUpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdFRvRGVsZXRlID0gdGhpcy5wcm9qZWN0cy5maW5kKHByb2plY3QgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QubmFtZSA9PT0gcHJvamVjdE5hbWUpO1xuICAgICAgICB0aGlzLnByb2plY3RzLnNwbGljZSh0aGlzLnByb2plY3RzLmluZGV4T2YocHJvamVjdFRvRGVsZXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSlcbiAgICB9O1xuICAgIFxuXG4gICAgLy8gQ2FuIGFkZCB0b2RheSdzIGFuZCB0aGlzIHdlZWsncyBmdW5jdGlvbmFsaXR5LlxufTsiLCJpbXBvcnQgVGFzayBmcm9tIFwiLi4vdGFza1wiO1xuaW1wb3J0IFByb2plY3QgZnJvbSBcIi4uL3Byb2plY3RcIjtcblxuY2xhc3MgVGFza1VJIHtcblx0Ly8gUHVycG9zZSBvZiB0aGlzIGNsYXNzIGl0IHRvIHRha2UgaW4gYSB0YXNrIG9iaiwgYW5kIHR1cm4gaXQgaW50b1xuXHQvLyBhIGRpdiB3aXRoIGFsbCByZWxldmFudCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIHRhc2suXG5cdC8vIEZyb20gbGVmdC10by1yaWdodDogW2NoZWNrQm94LCBuYW1lLCBkZXRhaWxzLCBwcmlvcml0eSwgZGF0ZSwgZWRpdEljb24sIGJpbkljb25dXG5cdGNvbnN0cnVjdG9yKHRhc2tPYmopIHtcblx0XHR0aGlzLnRhc2sgPSB0YXNrT2JqO1xuXHR9XG5cdHJlbmRlckluZm8oZWxlbSwgYWRkZWRDbGFzcywgdGV4dCA9IFwiXCIpIHtcblx0XHRjb25zdCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtKTtcblx0XHRuYW1lLmNsYXNzTGlzdC5hZGQoYWRkZWRDbGFzcyk7XG5cdFx0bmFtZS50ZXh0Q29udGVudCA9IHRleHQ7IC8vIGRlZmF1bHQgZW1wdHkgc3RyXG5cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRjcmVhdGVFbGVtZW50cyh0YXNrQ29udGFpbmVyKSB7XG5cdFx0Y29uc3Qgc3RhdHVzQ2hlY2sgPSB0aGlzLnJlbmRlckluZm8oXCJpbnB1dFwiLCBcInN0YXR1c0NoZWNrXCIpO1xuXHRcdHN0YXR1c0NoZWNrLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJjaGVja2JveFwiKTtcblx0XHRzdGF0dXNDaGVjay5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInN0YXR1c0NoZWNrXCIpO1xuXHRcdHN0YXR1c0NoZWNrLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGV2ZW50KSA9PiB7XG5cdFx0XHRpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHtcblx0XHRcdFx0dGFza0NvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gXCI0MCVcIjtcblx0XHRcdFx0Ly8gdGFza0NvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGUoMC45ODUpJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRhc2tDb250YWluZXIuc3R5bGUub3BhY2l0eSA9IFwiMTAwJVwiO1xuXHRcdFx0XHQvLyB0YXNrQ29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZSgxKSc7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRjb25zdCBuYW1lID0gdGhpcy5yZW5kZXJJbmZvKFwiZGl2XCIsIFwidGFza05hbWVcIiwgdGhpcy50YXNrLm5hbWUpO1xuXG5cdFx0Ly8gV2hlbiBjbGlja2VkLCBwb3AgdXAgYSBmb3JtIHdoZXJlIHRoZSBkZXRhaWxzIG9mIHRoZSB0YXNrIGlzIGRpc3BsYXllZC5cblx0XHRjb25zdCBkZXRhaWxzQnRuID0gdGhpcy5yZW5kZXJJbmZvKFwiYnV0dG9uXCIsIFwidW5pcXVlQnRuXCIsIFwiRGV0YWlsc1wiKTtcblx0XHRkZXRhaWxzQnRuLmNsYXNzTGlzdC5hZGQoXCJkZXRhaWxzXCIpO1xuXG5cdFx0Ly8gUHJpb3JpdHkgaWNvblxuXHRcdGNvbnN0IHByaW9yaXR5ID0gdGhpcy5yZW5kZXJJbmZvKFwiZGl2XCIsIFwic3RhdHVzUHJpb1wiKTtcblx0XHRjb25zdCBwcmlvcml0eUljb24gPSB0aGlzLnJlbmRlckluZm8oXCJpXCIsIFwibWF0ZXJpYWwtaWNvbnNcIiwgXCJ3YXJuaW5nXCIpO1xuXG5cdFx0Ly8gQ2hhbmdlIGNvbG9yIGJhc2VkIG9uIHByaW9yaXR5IG9mIHRhc2sgLT4gWydoaWdoJywgJ21lZGl1bScsICdsb3cnXVxuXHRcdHByaW9yaXR5SWNvbi5jbGFzc0xpc3QuYWRkKHRoaXMudGFzay5wcmlvcml0eSk7XG5cdFx0cHJpb3JpdHkuYXBwZW5kQ2hpbGQocHJpb3JpdHlJY29uKTtcblxuXHRcdC8vIEp1c3QgYSBtb2NrIGRhdGUgZm9yIG5vdy4gU3ViamVjdCB0byBjaGFuZ2UgYmFzZWQgb24gdXNlciBpbnB1dC5cblx0XHQvLyBjb25zdCB0aW1lRWxhcHNlZCA9IERhdGUubm93KCk7XG5cdFx0Ly8gY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSh0aW1lRWxhcHNlZCk7XG5cdFx0Ly8gY29uc3QgZGF0ZSA9IHRoaXMucmVuZGVySW5mbyhcblx0XHQvLyBcdFwiZGl2XCIsXG5cdFx0Ly8gXHRcInRhc2tEYXRlXCIsXG5cdFx0Ly8gXHRgJHt0b2RheS50b0xvY2FsZURhdGVTdHJpbmcoKX1gXG5cdFx0Ly8gKTtcblxuXHRcdGNvbnN0IGRhdGUgPSB0aGlzLnJlbmRlckluZm8oXG5cdFx0XHRcImRpdlwiLFxuXHRcdFx0XCJ0YXNrRGF0ZVwiLFxuXHRcdFx0dGhpcy50YXNrLmR1ZURhdGVGb3JtYXR0ZWRcblx0XHQpXG5cblx0XHQvLyBpY29uc1xuXHRcdGNvbnN0IGVkaXQgPSB0aGlzLnJlbmRlckluZm8oXCJkaXZcIiwgXCJ0YXNrRWRpdFwiKTtcblx0XHRjb25zdCBlZGl0SWNvbiA9IHRoaXMucmVuZGVySW5mbyhcImlcIiwgXCJtYXRlcmlhbC1pY29uc1wiLCBcImVkaXRcIik7XG5cdFx0ZWRpdC5hcHBlbmRDaGlsZChlZGl0SWNvbik7XG5cblx0XHRjb25zdCB0YXNrRGVsID0gdGhpcy5yZW5kZXJJbmZvKFwiZGl2XCIsIFwidGFza0RlbFwiKTtcblx0XHRjb25zdCBkZWxJY29uID0gdGhpcy5yZW5kZXJJbmZvKFwiaVwiLCBcIm1hdGVyaWFsLWljb25zXCIsIFwiZGVsZXRlXCIpO1xuXHRcdFx0XG5cdFx0Ly8gQWRkIHVuaXF1ZSBpZCBpZGVudGlmZXIgYmFzZWQgb24gdGFzayBpZCBmb3IgYmluIGljb24uXG5cdFx0dGFza0RlbC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBgZGVsVGFzay0ke3RoaXMudGFzay5pZH1gKVxuXG5cdFx0Ly8gQ3JlYXRlIERhdGFzZXQ/P1xuXHRcdC8vIGRlbEljb24uZGF0YXNldC5pZCA9IHRoaXMudGFzay5pZDtcblxuXHRcdHRhc2tEZWwuYXBwZW5kQ2hpbGQoZGVsSWNvbik7XG5cblx0XHRyZXR1cm4gW3N0YXR1c0NoZWNrLCBuYW1lLCBkZXRhaWxzQnRuLCBwcmlvcml0eSwgZGF0ZSwgZWRpdCwgdGFza0RlbF07XG5cdH1cblx0ZHJhdygpIHtcblx0XHRjb25zdCB0YXNrQ29udGFpbmVyID0gdGhpcy5yZW5kZXJJbmZvKFwiZGl2XCIsIFwidGFzay1jb250YWluZXJcIik7XG5cdFx0Y29uc3QgZWxlbXMgPSB0aGlzLmNyZWF0ZUVsZW1lbnRzKHRhc2tDb250YWluZXIpO1xuXHRcdGZvciAobGV0IGVsZW0gb2YgZWxlbXMpIHtcblx0XHRcdHRhc2tDb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbSk7XG5cdFx0fVxuXHRcdHJldHVybiB0YXNrQ29udGFpbmVyO1xuXHR9XG59XG5cbmNsYXNzIFByb2plY3RVSSB7XG5cdGNvbnN0cnVjdG9yKHByb2plY3RPYmopIHtcblx0XHR0aGlzLnByb2plY3QgPSBwcm9qZWN0T2JqO1xuXHR9XG5cdGRyYXcoKSB7XG5cdFx0Y29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW4tY29udGVudFwiKTtcblx0XHR0aGlzLmNsZWFyKG1haW5Db250ZW50KTtcblxuXHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHRhc2tzIGFuZCBnaXZlIGl0IGEgVGFza1VJIGNsYXNzLlxuXHRcdC8vIFVzZSB0aGUgZHJhdyBtZXRob2QgdG8gZ2V0IHRoZSBkaXYgY29udGFpbmVyIGFuZCBhcHBlbmQgaXQgdG9cbiAgICAgICAgLy8gbWFpbkNvbnRlbnQgY29udGFpbmVyLlxuXHRcdHRoaXMuZHJhd1Rhc2tzKG1haW5Db250ZW50LCB0aGlzLnByb2plY3QudGFza3MpO1xuXG4gICAgICAgIGNvbnN0IGFkZFRhc2tPcHRpb24gPSB0aGlzLmFkZFRhc2tPcHRpb24oKTtcblx0XHRtYWluQ29udGVudC5hcHBlbmRDaGlsZChhZGRUYXNrT3B0aW9uKTtcblx0fVxuICAgIGFkZFRhc2tPcHRpb24oKSB7XG4gICAgICAgIC8vIERyYXcgYW4gYWRkIHRhc2sgb3B0aW9uIGJlbmVhdGggYWxsIHRhc2tzXG4gICAgICAgIGNvbnN0IGFkZFRhc2tDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBhZGRUYXNrQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvbnRhaW5lclwiKTtcbiAgICAgICAgYWRkVGFza0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiYWRkXCIpO1xuICAgIFxuICAgICAgICBjb25zdCBhZGRUYXNrQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgYWRkVGFza0J0bi5jbGFzc0xpc3QuYWRkKFwidW5pcXVlQnRuXCIpO1xuICAgICAgICBhZGRUYXNrQnRuLmNsYXNzTGlzdC5hZGQoXCJhZGRcIik7XG4gICAgICAgIGFkZFRhc2tCdG4udGV4dENvbnRlbnQgPSBcIkFERFwiO1xuICAgIFxuICAgICAgICBhZGRUYXNrQ29udGFpbmVyLmFwcGVuZENoaWxkKGFkZFRhc2tCdG4pO1xuICAgICAgICByZXR1cm4gYWRkVGFza0NvbnRhaW5lclxuICAgICAgICBcbiAgICB9XG5cdGRyYXdUYXNrcyhjb250YWluZXIsIHRhc2tzKSB7XG4gICAgICAgIGZvciAobGV0IHRhc2sgb2YgdGFza3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tEaXNwbGF5ID0gbmV3IFRhc2tVSSh0YXNrKTtcblx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXNrRGlzcGxheS5kcmF3KCkpO1xuXHRcdH1cblx0fVxuXG5cdGNsZWFyKGNvbnRlbnQpIHtcblx0XHRjb250ZW50LmlubmVySFRNTCA9IFwiXCI7XG5cdH1cblxuXHRjb21wbGV0ZVRhc2soKSB7XG5cdFx0Ly8gTWFrZSB0YXNrIGNvbnRhaW5lciB0cmFuc3BhcmVudCBhZnRlciBjb21wbGV0aW5nIHRhc2suXG5cdFx0Y29uc3QgY2hlY2tCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgpO1xuXHR9XG59XG5cbmV4cG9ydCB7IFRhc2tVSSwgUHJvamVjdFVJIH07XG4iLCJpbXBvcnQgVUkgZnJvbSAnLi9tb2R1bGVzL1VJJztcbmNvbnN0IFVzZXJJbnRlcmZhY2UgPSBuZXcgVUkoKTtcblxuVXNlckludGVyZmFjZS5sb2FkSG9tZVBhZ2UoKTsiLCJpbXBvcnQgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9wcm9qZWN0XCI7XG5pbXBvcnQgQWxsUHJvamVjdHMgZnJvbSBcIi4vQWxsUHJvamVjdHNcIjtcbmltcG9ydCB7IFRhc2tVSSwgUHJvamVjdFVJIH0gZnJvbSBcIi4vVUkvUHJvamVjdFVJXCI7XG5pbXBvcnQgeyBEcmF3Rm9ybSB9IGZyb20gXCIuL1VJL2Zvcm1cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUkge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnRvRG9MaXN0ID0gbmV3IEFsbFByb2plY3RzKCk7XG5cblx0XHQvLyBJbml0aWFsaXNlIGZpcnN0IGhvbWVQYWdlIHRvIGJlIG9uIHRoZSBcIkluYm94XCIgcGFnZS5cblx0XHR0aGlzLmN1cnJlbnRQcm9qZWN0UGFnZSA9IFwiSW5ib3hcIjtcblx0XHR0aGlzLmN1cnJlbnRGb3JtID0gRHJhd0Zvcm0oKTtcblx0fVxuXG5cdGxvYWRIb21lUGFnZSgpIHtcblx0XHQvLyBJbml0aWFsaXNlIGZpcnN0IGR1bW15IHRhc2s6XG5cdFx0Y29uc3QgdGFzazEgPSB7XG5cdFx0XHR0aXRsZTogXCJXYWxraW5nIHRoZSBkb2dcIixcblx0XHRcdGRldGFpbHM6IFwiSGUgaXMgYXNraW5nIGZvciBpdCBzbyB0aGlzIHRhc2sgaXMgYSBtdXN0XCIsXG5cdFx0XHRwcmlvcml0eTogXCJtZWRpdW1cIixcblx0XHRcdGRhdGU6IFwiMjUtMDItMjAwMlwiLFxuXHRcdH07XG5cdFx0dGhpcy5hZGROZXdUYXNrKHRoaXMuY3VycmVudFByb2plY3RQYWdlLCB0YXNrMSk7XG5cblx0XHR0aGlzLmxvYWRTaWRlQmFyKCk7XG5cdH1cblxuXHRsb2FkUGFnZShwcm9qZWN0TmFtZSkge1xuXHRcdC8vIFdlIG5lZWQgdG8gcmVzZXQgYWxsIGlkcyBvbiBhbGwgdGFza3MgdG8gcHJldmVudFxuXHRcdC8vIGRlbGV0aW9uIG9mIHR3byB0YXNrcyB3aXRoIHRoZSBzYW1lIGlkIGF0IG9uY2UuXG5cdFx0dGhpcy50b0RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5yZUluaXRpYWxpc2VJZCgpO1xuXG5cdFx0dGhpcy5kcmF3UGFnZShwcm9qZWN0TmFtZSk7XG5cblx0XHQvLyBSZWluaXRpYWxpc2UgYWRkIHRhc2sgZnVuY3Rpb24gZm9yIG5ldyBwYWdlJ3MgYnRuLlxuXHRcdHRoaXMuYWRkVGFza0Z1bmN0aW9uKHByb2plY3ROYW1lKTtcblx0XHQvLyBBcHBseSBldmVudGxpc3RlbmVycyBmb3IgZWFjaCBjb3JyZXNwb25kaW5nIGJpbiBpY29ucy5cblx0XHR0aGlzLmFwcGx5RGVsVGFza0Z1bmN0aW9uKHByb2plY3ROYW1lKTtcblx0fVxuXG5cdGRyYXdQYWdlKHByb2plY3ROYW1lKSB7XG5cdFx0Y29uc3QgcHJvamVjdERpc3BsYXkgPSBuZXcgUHJvamVjdFVJKHRoaXMudG9Eb0xpc3QuZ2V0UHJvamVjdChwcm9qZWN0TmFtZSkpO1xuXHRcdHByb2plY3REaXNwbGF5LmRyYXcoKTtcblx0fVxuXG5cdC8qIEJ1dHRvbiBmdW5jdGlvbmFsaXRpZXMgKi9cblx0YWRkVGFza0Z1bmN0aW9uKHByb2plY3ROYW1lKSB7XG5cdFx0Y29uc3QgYWRkVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudW5pcXVlQnRuLmFkZFwiKTtcblx0XHRhZGRUYXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdFx0XHR0aGlzLmN1cnJlbnRGb3JtLmNsZWFyKCk7XG5cdFx0XHR0aGlzLmN1cnJlbnRGb3JtLmFkZFRhc2soKTtcblxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImZvcm1cIikuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mYWNlLW1hc2tcIikuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuXG5cdFx0XHQvLyBTZXQgZGVmYXVsdCBkYXRlIGlucHV0IHRvIGN1cnJlbnQgZGF5LlxuXHRcdFx0aW5wdXREdWVEYXRlLnZhbHVlQXNEYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdFx0Ly8gQWRkIGRyYXcgbmV3IHRhc2sgZnVuY3Rpb25hbGl0eSB0byBhcHBlbmRUYXNrQnRuIG9uIHRoZSBmb3JtLlxuXHRcdFx0Y29uc3QgYXBwZW5kVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudW5pcXVlQnRuLmFwcGVuZFRhc2tCdG5cIik7XG5cdFx0XHR0aGlzLnN1Ym1pdFRhc2tGdW5jdGlvbihhcHBlbmRUYXNrQnRuLCBwcm9qZWN0TmFtZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRhZGROZXdUYXNrKHByb2plY3ROYW1lLCB0YXNrSW5mbykge1xuXHRcdHRoaXMudG9Eb0xpc3Rcblx0XHRcdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKVxuXHRcdFx0LmFkZFRhc2soXG5cdFx0XHRcdG5ldyBUYXNrKFxuXHRcdFx0XHRcdHRhc2tJbmZvW1widGl0bGVcIl0sXG5cdFx0XHRcdFx0dGFza0luZm9bXCJkZXRhaWxzXCJdLFxuXHRcdFx0XHRcdHRhc2tJbmZvW1wiZGF0ZVwiXSxcblx0XHRcdFx0XHR0YXNrSW5mb1tcInByaW9yaXR5XCJdLFxuXHRcdFx0XHRcdHRoaXMudG9Eb0xpc3QuZ2V0UHJvamVjdChwcm9qZWN0TmFtZSkudGFza3MubGVuZ3RoXG5cdFx0XHRcdClcblx0XHRcdCk7XG5cdFx0dGhpcy5sb2FkUGFnZShwcm9qZWN0TmFtZSk7XG5cdH1cblxuXHRzdWJtaXRUYXNrRnVuY3Rpb24oYnRuLCBwcm9qZWN0TmFtZSkge1xuXHRcdGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG5cdFx0XHRjb25zdCB0YXNrSW5mbyA9IHRoaXMuY3VycmVudEZvcm0uY29sbGVjdFRhc2tJbmZvKCk7XG5cdFx0XHR0aGlzLmFkZE5ld1Rhc2socHJvamVjdE5hbWUsIHRhc2tJbmZvKTtcblxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImZvcm1cIikuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZhY2UtbWFza1wiKS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZW1vdmVUYXNrRnVuY3Rpb24ocHJvamVjdE5hbWUsIHRhc2tJZCkge1xuXHRcdC8vIEFkZCBkZWxldGUgdGFzayBmdW5jdGlvbnMgZm9yIGVhY2ggZXhpc3RpbmcgdGFza1VJLlxuXHRcdGNvbnN0IGRlbEltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBkZWxUYXNrLSR7dGFza0lkfWApO1xuXHRcdGRlbEltZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRcdFx0dGhpcy50b0RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5kZWxldGVUYXNrKHRhc2tJZCk7XG5cdFx0XHR0aGlzLmxvYWRQYWdlKHByb2plY3ROYW1lKTtcblx0XHR9KTtcblx0fVxuXHRhcHBseURlbFRhc2tGdW5jdGlvbihwcm9qZWN0TmFtZSkge1xuXHRcdC8vIEZvciBhbGwgdGhlIHRhc2tzIGluIHRoZSBwcm9qZWN0LCBhZGQgcmVtb3ZlVGFzayBmdW5jdGlvbmFsaXR5IGZvclxuXHRcdC8vIGVhY2ggdGFzay5cblx0XHR0aGlzLnRvRG9MaXN0LmdldFByb2plY3QocHJvamVjdE5hbWUpLnRhc2tzLm1hcCgodGFzaykgPT4ge1xuXHRcdFx0dGhpcy5yZW1vdmVUYXNrRnVuY3Rpb24ocHJvamVjdE5hbWUsIHRhc2suaWQpO1xuXHRcdH0pO1xuXHR9XG5cblx0LyogU2lkZUJhciBmdW5jdGlvbmFsaXRpZXMgKi9cblx0bG9hZFNpZGVCYXIoKSB7XG5cdFx0dGhpcy5hZGRTbGlkZUluT3V0KCk7XG5cdFx0dGhpcy5kcmF3SW5ib3hUYWJzKCk7XG5cdFx0dGhpcy5kcmF3UHJvamVjdFRhYnMoKTtcblx0fVxuXG5cdGRyYXdJbmJveFRhYnMoKSB7XG5cdFx0Ly8gQWRkIHRvZGF5IGFuZCB0aGlzIHdlZWsncyB0YXNrIGJlbmVhdGggSW5ib3ggdGFiIHNpZGViYXIuXG5cdFx0Y29uc3QgaW5ib3hUYWJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuXG5cdFx0dGhpcy5hZGRUYWIoaW5ib3hUYWJzLCBcIlRvZGF5XCIpO1xuXHRcdHRoaXMuYWRkVGFiKGluYm94VGFicywgXCJUaGlzIFdlZWtcIik7XG5cblx0XHRjb25zdCBpbmJveEJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5ib3gtYmFyXCIpO1xuXHRcdGluYm94QmFyLmFwcGVuZENoaWxkKGluYm94VGFicyk7XG5cdFx0dGhpcy5hZGREcm9wRG93bk1lbnUoaW5ib3hCYXIsIGluYm94VGFicyk7XG5cdH1cblxuXHRkcmF3UHJvamVjdFRhYnMoKSB7XG5cdFx0Ly8gRmluZCBhbGwgb3RoZXIgcHJvamVjdHMuXG5cdFx0Y29uc3QgaW5ib3hQcm9qZWN0cyA9IFtcIkluYm94XCIsIFwiVG9kYXlcIiwgXCJUaGlzIFdlZWtcIl07XG5cdFx0Y29uc3QgY3VzdG9tUHJvamVjdHMgPSB0aGlzLnRvRG9MaXN0LnByb2plY3RzLmZpbHRlcihcblx0XHRcdChwcm9qZWN0KSA9PiAhaW5ib3hQcm9qZWN0cy5pbmNsdWRlcyhwcm9qZWN0Lm5hbWUpXG5cdFx0KTtcblxuXHRcdGNvbnN0IHByb2plY3RUYWJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuXHRcdGZvciAobGV0IHByb2plY3Qgb2YgY3VzdG9tUHJvamVjdHMpIHtcblx0XHRcdHRoaXMuYWRkVGFiKHByb2plY3RUYWJzLCBwcm9qZWN0Lm5hbWUpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHByb2plY3RCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3QtYmFyXCIpO1xuXHRcdHByb2plY3RCYXIuYXBwZW5kQ2hpbGQocHJvamVjdFRhYnMpO1xuXHRcdHRoaXMuYWRkRHJvcERvd25NZW51KHByb2plY3RCYXIsIHByb2plY3RUYWJzKTtcblx0fVxuXG5cdGFkZERyb3BEb3duTWVudShtZW51QmFyLCB0YWJzKSB7XG5cdFx0Ly8gVGFicyB3aWxsIGJlIGVsb25nYXRlZCBiYXNlZCBvbiB0YWIgaG92ZXJlZC5cblx0XHRtZW51QmFyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgKCkgPT4ge1xuXHRcdFx0dGFicy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXHRcdH0pO1xuXHRcdG1lbnVCYXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsICgpID0+IHtcblx0XHRcdHRhYnMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdH0pO1xuXHR9XG5cdGFkZFRhYihtZW51VGFiLCBwcm9qZWN0TmFtZSkge1xuXHRcdC8vIENyZWF0ZSBsaSBhbmQgYXBwZW5kIGl0IHRvIGdpdmVuIHBhcmFtIGVsZW0uXG5cdFx0Y29uc3QgdGFiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuXG5cdFx0dGFiLnRleHRDb250ZW50ID0gdGhpcy50b0RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5uYW1lO1xuXHRcdG1lbnVUYWIuYXBwZW5kQ2hpbGQodGFiKTtcblx0fVxuXG5cdGFkZFNsaWRlSW5PdXQoKSB7XG5cdFx0Y29uc3Qgc2lkZUJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2lkZUJhclwiKTtcblx0XHRzaWRlQmFyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgKCkgPT4ge1xuXHRcdFx0c2lkZUJhci5zdHlsZS53aWR0aCA9IFwiMjAwcHhcIjtcblx0XHR9KTtcblx0XHRzaWRlQmFyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCAoKSA9PiB7XG5cdFx0XHRzaWRlQmFyLnN0eWxlLndpZHRoID0gXCI2NXB4XCI7XG5cdFx0fSk7XG5cdH1cbn1cbiIsImV4cG9ydCB7RHJhd0Zvcm19XG5cbmNvbnN0IERyYXdGb3JtID0gKCkgPT4ge1xuICAgIC8vIFdoZW4gdXNlciBwcmVzc2VzIGFkZCB0YXNrLCBwb3AgdXAgYSBmb3JtIHRoYXQgYXNrcyBmb3IgYWxsIHJlcSBpbnB1dC5cbiAgICAvLyBUaGlzIGluY2x1ZGVzIFt0YXNrTmFtZSwgZGV0YWlscywgcHJpb3JpdHlMZXZlbCwgRGF0ZV07XG4gICAgY29uc3QgZm9ybUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWNvbnRhaW5lcicpO1xuXG4gICAgY29uc3QgY2xlYXIgPSAoKSA9PiB7XG4gICAgICAgIHdoaWxlKGZvcm1Db250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgZm9ybUNvbnRhaW5lci5yZW1vdmVDaGlsZChmb3JtQ29udGFpbmVyLmxhc3RDaGlsZCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGFkZFRhc2sgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tUaXRsZSA9IGFkZElucHV0VGV4dCgnVGFzayBUaXRsZTogJywgJ2UuZy4gTGVhcm4gUmVhY3QgaW4gJyArXG4gICAgICAgICcyMCBkYXlzLi4nLCAnaW5wdXRUYXNrVGl0bGUnKTtcbiAgICAgICAgdGFza1RpdGxlLmNsYXNzTGlzdC5hZGQoJ2lucHV0VGFza1RpdGxlJyk7XG5cbiAgICAgICAgY29uc3QgdGFza0RldGFpbHMgPSBhZGRUZXh0QXJlYSgnVGFzayBEZXRhaWxzOiAnLCAnZS5nLiBOb3QgYW4gJyArXG4gICAgICAgICd0YXNrLiBSZW1lbWJlciB0byB0YWtlIGJyZWFrcyBhbmQgd2FsayBvdXRzaWRlLicsXG4gICAgICAgICAnaW5wdXRUYXNrRGV0YWlscycpO1xuICAgICAgICB0YXNrRGV0YWlscy5jbGFzc0xpc3QuYWRkKCdpbnB1dFRhc2tEZXRhaWxzJyk7IFxuICAgICAgICBcbiAgICAgICAgY29uc3QgcHJpb09wdGlvbnMgPSBhZGRQcmlvcml0eU9wdGlvbnMoKTtcbiAgICAgICAgY29uc3QgZHVlRGF0ZSA9IGFkZElucHV0RHVlRGF0ZSgpO1xuICAgICAgICBjb25zdCBjbG9zZUZvcm1PcHRpb24gPSBhZGRDbG9zZUZvcm1GdW5jdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IHRhc2tzSW5mbyA9IFt0YXNrVGl0bGUsIHRhc2tEZXRhaWxzLCBwcmlvT3B0aW9ucywgZHVlRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZUZvcm1PcHRpb25dO1xuXG4gICAgICAgIGZvcihsZXQgaW5mbyBvZiB0YXNrc0luZm8pIHtcbiAgICAgICAgICAgIGZvcm1Db250YWluZXIuYXBwZW5kQ2hpbGQoaW5mbyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQWRkIHN1Ym1pdCBidG4uXG4gICAgICAgIGNvbnN0IGFwcGVuZFRhc2tCdG4gPSBhZGRBcHBlbmRUYXNrQnRuKClcbiAgICAgICAgXG4gICAgICAgIGZvcm1Db250YWluZXIuYXBwZW5kQ2hpbGQoYXBwZW5kVGFza0J0bik7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBhZGRBcHBlbmRUYXNrQnRuID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBhcHBlbmRUYXNrQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIGFwcGVuZFRhc2tCdG4uY2xhc3NMaXN0LmFkZCgndW5pcXVlQnRuJyk7XG4gICAgICAgIGFwcGVuZFRhc2tCdG4uY2xhc3NMaXN0LmFkZCgnYXBwZW5kVGFza0J0bicpO1xuICAgICAgICBhcHBlbmRUYXNrQnRuLnRleHRDb250ZW50ID0gJ0FkZCBUYXNrJztcbiAgICAgICAgYXBwZW5kVGFza0J0bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwic3VibWl0XCIpO1xuICAgICAgICBcbiAgICAgICAgLy8gYXBwZW5kVGFza0J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIC8vICAgICBhcHBlbmRUYXNrRnVuY3Rpb24oZXZlbnQpXG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIHJldHVybiBhcHBlbmRUYXNrQnRuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbGxlY3RUYXNrSW5mbyA9ICgpID0+IHtcbiAgICAgICAgLy8gQ29sbGVjdCBhbGwgcmVsZXZhbnQgaW5mb3JtYXRpb24gYmFzZWQgb24gdXNlciBpbnB1dCBhbmQgcmV0dXJuXG4gICAgICAgIC8vIGl0IGluIGFuIG9iai5cbiAgICAgICAgY29uc3QgdGFza1RpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0VGFza1RpdGxlJyk7XG4gICAgICAgIGNvbnN0IHRhc2tEZXRhaWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0VGFza0RldGFpbHMnKTtcbiAgICAgICAgY29uc3QgcHJpb0Nob3NlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAnaW5wdXRbbmFtZT1cInByaW9cIl06Y2hlY2tlZCcpO1xuICAgICAgICBjb25zdCBkYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2lucHV0RHVlRGF0ZScpO1xuXG4gICAgICAgIGNvbnN0IHRhc2tJbmZvID0ge1xuICAgICAgICAgICAgJ3RpdGxlJzogdGFza1RpdGxlLnZhbHVlLFxuICAgICAgICAgICAgJ2RldGFpbHMnOiB0YXNrRGV0YWlscy52YWx1ZSxcbiAgICAgICAgICAgICdwcmlvcml0eSc6IHByaW9DaG9zZW4udmFsdWUsXG4gICAgICAgICAgICAnZGF0ZSc6IGRhdGUudmFsdWUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrSW5mbzsgXG4gICAgfVxuXG4gICAgY29uc3QgYWRkQ2xvc2VGb3JtRnVuY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNsb3NlRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBjbG9zZUZvcm0uY2xhc3NMaXN0LmFkZCgnY2xvc2VGb3JtQnRuJyk7XG4gICAgICAgIGNsb3NlRm9ybS5zcmMgPSAnLi4vLi4vLi4vaW1ncy9tYWMtY2xvc2UtYnRuLnBuZyc7XG4gICAgICAgIGNsb3NlRm9ybS5hbHQgPSAnQSBidXR0b24gdGhhdCBjbG9zZXMgdGhlIGZvcm0uJztcblxuICAgICAgICBjbG9zZUZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybScpO1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYWNlLW1hc2snKTtcbiAgICAgICAgICAgIGZvcm0uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgb3ZlcmxheS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjbG9zZUZvcm07XG4gICAgfTtcblxuICAgIGNvbnN0IGFkZElucHV0RHVlRGF0ZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAgIGNvbnN0IGRhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIGRhdGVMYWJlbC5jbGFzc0xpc3QuYWRkKCdkYXRlTGFiZWwnKTtcbiAgICAgICAgZGF0ZUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ2lucHV0RHVlRGF0ZScpO1xuICAgICAgICBkYXRlTGFiZWwudGV4dENvbnRlbnQgPSAnRHVlIERhdGU6JztcblxuICAgICAgICBjb25zdCBpbnB1dER1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBpbnB1dER1ZURhdGUuc2V0QXR0cmlidXRlKCd0eXBlJywgXCJkYXRlXCIpO1xuICAgICAgICBpbnB1dER1ZURhdGUuc2V0QXR0cmlidXRlKCdpZCcsICdpbnB1dER1ZURhdGUnKTtcbiAgICAgICAgaW5wdXREdWVEYXRlLnNldEF0dHJpYnV0ZSgnbmFtZScsICd0cmlwLXN0YXJ0Jyk7XG5cbiAgICAgICAgZHVlRGF0ZS5hcHBlbmRDaGlsZChkYXRlTGFiZWwpO1xuICAgICAgICBkdWVEYXRlLmFwcGVuZENoaWxkKGlucHV0RHVlRGF0ZSk7XG4gICAgICAgIHJldHVybiBkdWVEYXRlO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZFByaW9yaXR5T3B0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgLy8gQSB3cmFwcGVyIGlzIGdvaW5nIHRvIHdyYXAgdGhlIGxhYmVsIGFuZCBhIGNvbnRhaW5lciBjb25zaXN0aW5nIG9mXG4gICAgICAgIC8vIHRoZSByYWRpbyBvcHRpb25zLiBcbiAgICAgICAgY29uc3QgaW5wdXRQcmlvV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBwcmlvT3B0aW9uc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBpbnB1dFByaW9XcmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3ByaW9XcmFwcGVyJylcbiAgICAgICAgcHJpb09wdGlvbnNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncHJpb09wdGlvbnMnKTtcblxuICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdwcmlvTGFiZWwnKTtcbiAgICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBcIkhvdyBpbXBvcnRhbnQgaXMgdGhpcyB0YXNrP1wiO1xuICAgICAgICBjb25zdCBsb3dQcmlvID0gY3JlYXRlUmFkaW9JbnB1dEFuZExhYmVsKCdsb3dQcmlvJywgJ2xvdycpO1xuICAgICAgICBjb25zdCBtZWRQcmlvID0gY3JlYXRlUmFkaW9JbnB1dEFuZExhYmVsKCdtZWRQcmlvJywgJ21lZGl1bScpO1xuICAgICAgICBjb25zdCBoaWdoUHJpbyA9IGNyZWF0ZVJhZGlvSW5wdXRBbmRMYWJlbCgnaGlnaFByaW8nLCAnaGlnaCcpO1xuXG4gICAgICAgIGZvcihsZXQgcHJpb09wdGlvbnMgb2YgW2xvd1ByaW8sIG1lZFByaW8sIGhpZ2hQcmlvXSkge1xuICAgICAgICAgICAgcHJpb09wdGlvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQocHJpb09wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlucHV0UHJpb1dyYXBwZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICBpbnB1dFByaW9XcmFwcGVyLmFwcGVuZENoaWxkKHByaW9PcHRpb25zQ29udGFpbmVyKTtcbiAgICAgICAgcmV0dXJuIGlucHV0UHJpb1dyYXBwZXI7XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlUmFkaW9JbnB1dEFuZExhYmVsKGlkLCB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgcmFkaW9PcHRpb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmFkaW9cIixcbiAgICAgICAgICAgICAgICBcImlkXCI6IGlkLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiAncHJpbycsXG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IobGV0IGF0dHIgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyaWJ1dGVzW2F0dHJdKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaWQpO1xuICAgICAgICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZChpZCk7XG4gICAgICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByYWRpb09wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICByYWRpb09wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgICAgICByZXR1cm4gcmFkaW9PcHRpb25Db250YWluZXI7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgYWRkVGV4dEFyZWEgPSAobGFiZWxOYW1lLCBwbGFjZWhvbGRlciwgaWQsIHJlcXVpcmVkPXRydWUpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBjb25zdCBpbnB1dExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgaW5wdXRMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkKTtcbiAgICAgICAgaW5wdXRMYWJlbC50ZXh0Q29udGVudCA9IGxhYmVsTmFtZTtcblxuICAgICAgICBjb25zdCBpbnB1dFRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgJ25hbWUnOiBpZCxcbiAgICAgICAgICAgICdwbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgJ3Jvd3MnOiA2LFxuICAgICAgICAgICAgJ2NvbHMnOiA1MCxcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IobGV0IGF0dHJJZHggaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgaW5wdXRUZXh0QXJlYS5zZXRBdHRyaWJ1dGUoYXR0cklkeCwgYXR0cmlidXRlc1thdHRySWR4XSlcbiAgICAgICAgfVxuICAgICAgICBpbnB1dFRleHRBcmVhLnJlcXVpcmVkID0gcmVxdWlyZWQ7IC8vIERlZmF1bHQgVHJ1ZVxuXG4gICAgICAgIGlucHV0LmFwcGVuZENoaWxkKGlucHV0TGFiZWwpO1xuICAgICAgICBpbnB1dC5hcHBlbmRDaGlsZChpbnB1dFRleHRBcmVhKTtcbiAgICAgICAgcmV0dXJuIGlucHV0XG4gICAgfVxuXG4gICAgY29uc3QgYWRkSW5wdXRUZXh0ID0gKGxhYmVsTmFtZSwgcGxhY2Vob2xkZXIsIGlkLCByZXF1aXJlZD10cnVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgY29uc3QgaW5wdXRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIGlucHV0TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCBpZCk7XG4gICAgICAgIGlucHV0TGFiZWwudGV4dENvbnRlbnQgPSBsYWJlbE5hbWU7XG5cbiAgICAgICAgY29uc3QgaW5wdXRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgICAgICAgICd0eXBlJzogJ3RleHQnLFxuICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAnbmFtZSc6IGlkLFxuICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJcbiAgICAgICAgfTtcbiAgICAgICAgZm9yKGxldCBhdHRySWR4IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlucHV0VGV4dC5zZXRBdHRyaWJ1dGUoYXR0cklkeCwgYXR0cmlidXRlc1thdHRySWR4XSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0VGV4dC5yZXF1aXJlZCA9IHJlcXVpcmVkOyBcblxuICAgICAgICBpbnB1dC5hcHBlbmRDaGlsZChpbnB1dExhYmVsKTtcbiAgICAgICAgaW5wdXQuYXBwZW5kQ2hpbGQoaW5wdXRUZXh0KTtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICByZXR1cm4geyBhZGRUYXNrLCBjbGVhciwgY29sbGVjdFRhc2tJbmZvIH07XG5cblxufSJdLCJuYW1lcyI6WyJUYXNrIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJpZCIsInRoaXMiLCJ2YWx1ZSIsIl9uYW1lIiwiX2lkIiwiX3ByaW9yaXR5IiwiX2Rlc2NyaXB0aW9uIiwiX2R1ZURhdGUiLCJkdWVEYXRlRm9ybWF0dGVkIiwic3BsaXQiLCJQcm9qZWN0IiwidGFza3MiLCJfdGFza3MiLCJhZGRUYXNrIiwidGFzayIsInB1c2giLCJkZWxldGVUYXNrIiwidGFza0lkIiwiZmlsdGVyIiwicmVJbml0aWFsaXNlSWQiLCJuZXdJZCIsImxlbmd0aCIsIkFsbFByb2plY3RzIiwicHJvamVjdHMiLCJfcHJvamVjdHMiLCJjb250YWlucyIsInByb2plY3ROYW1lIiwic29tZSIsInByb2plY3QiLCJnZXRQcm9qZWN0IiwiZmluZCIsImFkZFByb2plY3QiLCJuZXdQcm9qZWN0TmFtZSIsImRlbGV0ZVByb2plY3QiLCJwcm9qZWN0VG9EZWxldGUiLCJzcGxpY2UiLCJpbmRleE9mIiwiVGFza1VJIiwidGFza09iaiIsInJlbmRlckluZm8iLCJlbGVtIiwiYWRkZWRDbGFzcyIsInRleHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZUVsZW1lbnRzIiwidGFza0NvbnRhaW5lciIsInN0YXR1c0NoZWNrIiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0IiwiY2hlY2tlZCIsInN0eWxlIiwib3BhY2l0eSIsImRldGFpbHNCdG4iLCJwcmlvcml0eUljb24iLCJhcHBlbmRDaGlsZCIsImRhdGUiLCJlZGl0IiwiZWRpdEljb24iLCJ0YXNrRGVsIiwiZGVsSWNvbiIsImRyYXciLCJlbGVtcyIsIlByb2plY3RVSSIsInByb2plY3RPYmoiLCJtYWluQ29udGVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbGVhciIsImRyYXdUYXNrcyIsImFkZFRhc2tPcHRpb24iLCJhZGRUYXNrQ29udGFpbmVyIiwiYWRkVGFza0J0biIsImNvbnRhaW5lciIsInRhc2tEaXNwbGF5IiwiY29udGVudCIsImlubmVySFRNTCIsImNvbXBsZXRlVGFzayIsImdldEVsZW1lbnRCeUlkIiwidG9Eb0xpc3QiLCJjdXJyZW50UHJvamVjdFBhZ2UiLCJjdXJyZW50Rm9ybSIsImZvcm1Db250YWluZXIiLCJhZGRDbG9zZUZvcm1GdW5jdGlvbiIsImNsb3NlRm9ybSIsInNyYyIsImFsdCIsImZvcm0iLCJvdmVybGF5IiwidmlzaWJpbGl0eSIsImFkZElucHV0RHVlRGF0ZSIsImRhdGVMYWJlbCIsImlucHV0RHVlRGF0ZSIsImFkZFByaW9yaXR5T3B0aW9ucyIsImlucHV0UHJpb1dyYXBwZXIiLCJsYWJlbCIsInByaW9PcHRpb25zQ29udGFpbmVyIiwibG93UHJpbyIsImNyZWF0ZVJhZGlvSW5wdXRBbmRMYWJlbCIsIm1lZFByaW8iLCJoaWdoUHJpbyIsInByaW9PcHRpb25zIiwicmFkaW9PcHRpb25Db250YWluZXIiLCJpbnB1dCIsImF0dHJpYnV0ZXMiLCJhdHRyIiwidGFza1RpdGxlIiwibGFiZWxOYW1lIiwicGxhY2Vob2xkZXIiLCJyZXF1aXJlZCIsImlucHV0TGFiZWwiLCJpbnB1dFRleHQiLCJhdHRySWR4IiwiYWRkSW5wdXRUZXh0IiwidGFza0RldGFpbHMiLCJpbnB1dFRleHRBcmVhIiwiYWRkVGV4dEFyZWEiLCJ0YXNrc0luZm8iLCJpbmZvIiwiYXBwZW5kVGFza0J0biIsImFkZEFwcGVuZFRhc2tCdG4iLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJsYXN0Q2hpbGQiLCJjb2xsZWN0VGFza0luZm8iLCJwcmlvQ2hvc2VuIiwiRHJhd0Zvcm0iLCJsb2FkSG9tZVBhZ2UiLCJhZGROZXdUYXNrIiwidGl0bGUiLCJkZXRhaWxzIiwibG9hZFNpZGVCYXIiLCJsb2FkUGFnZSIsImRyYXdQYWdlIiwiYWRkVGFza0Z1bmN0aW9uIiwiYXBwbHlEZWxUYXNrRnVuY3Rpb24iLCJ2YWx1ZUFzRGF0ZSIsIkRhdGUiLCJzdWJtaXRUYXNrRnVuY3Rpb24iLCJ0YXNrSW5mbyIsImJ0biIsInByZXZlbnREZWZhdWx0IiwicmVtb3ZlVGFza0Z1bmN0aW9uIiwibWFwIiwiYWRkU2xpZGVJbk91dCIsImRyYXdJbmJveFRhYnMiLCJkcmF3UHJvamVjdFRhYnMiLCJpbmJveFRhYnMiLCJhZGRUYWIiLCJpbmJveEJhciIsImFkZERyb3BEb3duTWVudSIsImluYm94UHJvamVjdHMiLCJjdXN0b21Qcm9qZWN0cyIsImluY2x1ZGVzIiwicHJvamVjdFRhYnMiLCJwcm9qZWN0QmFyIiwibWVudUJhciIsInRhYnMiLCJkaXNwbGF5IiwibWVudVRhYiIsInRhYiIsInNpZGVCYXIiLCJ3aWR0aCJdLCJzb3VyY2VSb290IjoiIn0=